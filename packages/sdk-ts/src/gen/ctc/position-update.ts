// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

export class PositionUpdate
	implements flatbuffers.IUnpackableObject<PositionUpdateT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): PositionUpdate {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsPositionUpdate(
		bb: flatbuffers.ByteBuffer,
		obj?: PositionUpdate,
	): PositionUpdate {
		return (obj || new PositionUpdate()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsPositionUpdate(
		bb: flatbuffers.ByteBuffer,
		obj?: PositionUpdate,
	): PositionUpdate {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new PositionUpdate()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	teamId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	instrumentId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	posLots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	openBuyLots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	openSellLots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	realizedPnlTicks(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 14);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	unrealizedPnlTicks(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 16);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	headroomLongLots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 18);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	headroomShortLots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 20);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	tsNanos(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 22);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	static startPositionUpdate(builder: flatbuffers.Builder) {
		builder.startObject(10);
	}

	static addTeamId(builder: flatbuffers.Builder, teamId: number) {
		builder.addFieldInt32(0, teamId, 0);
	}

	static addInstrumentId(builder: flatbuffers.Builder, instrumentId: number) {
		builder.addFieldInt32(1, instrumentId, 0);
	}

	static addPosLots(builder: flatbuffers.Builder, posLots: bigint) {
		builder.addFieldInt64(2, posLots, BigInt("0"));
	}

	static addOpenBuyLots(builder: flatbuffers.Builder, openBuyLots: bigint) {
		builder.addFieldInt64(3, openBuyLots, BigInt("0"));
	}

	static addOpenSellLots(builder: flatbuffers.Builder, openSellLots: bigint) {
		builder.addFieldInt64(4, openSellLots, BigInt("0"));
	}

	static addRealizedPnlTicks(
		builder: flatbuffers.Builder,
		realizedPnlTicks: bigint,
	) {
		builder.addFieldInt64(5, realizedPnlTicks, BigInt("0"));
	}

	static addUnrealizedPnlTicks(
		builder: flatbuffers.Builder,
		unrealizedPnlTicks: bigint,
	) {
		builder.addFieldInt64(6, unrealizedPnlTicks, BigInt("0"));
	}

	static addHeadroomLongLots(
		builder: flatbuffers.Builder,
		headroomLongLots: bigint,
	) {
		builder.addFieldInt64(7, headroomLongLots, BigInt("0"));
	}

	static addHeadroomShortLots(
		builder: flatbuffers.Builder,
		headroomShortLots: bigint,
	) {
		builder.addFieldInt64(8, headroomShortLots, BigInt("0"));
	}

	static addTsNanos(builder: flatbuffers.Builder, tsNanos: bigint) {
		builder.addFieldInt64(9, tsNanos, BigInt("0"));
	}

	static endPositionUpdate(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createPositionUpdate(
		builder: flatbuffers.Builder,
		teamId: number,
		instrumentId: number,
		posLots: bigint,
		openBuyLots: bigint,
		openSellLots: bigint,
		realizedPnlTicks: bigint,
		unrealizedPnlTicks: bigint,
		headroomLongLots: bigint,
		headroomShortLots: bigint,
		tsNanos: bigint,
	): flatbuffers.Offset {
		PositionUpdate.startPositionUpdate(builder);
		PositionUpdate.addTeamId(builder, teamId);
		PositionUpdate.addInstrumentId(builder, instrumentId);
		PositionUpdate.addPosLots(builder, posLots);
		PositionUpdate.addOpenBuyLots(builder, openBuyLots);
		PositionUpdate.addOpenSellLots(builder, openSellLots);
		PositionUpdate.addRealizedPnlTicks(builder, realizedPnlTicks);
		PositionUpdate.addUnrealizedPnlTicks(builder, unrealizedPnlTicks);
		PositionUpdate.addHeadroomLongLots(builder, headroomLongLots);
		PositionUpdate.addHeadroomShortLots(builder, headroomShortLots);
		PositionUpdate.addTsNanos(builder, tsNanos);
		return PositionUpdate.endPositionUpdate(builder);
	}

	unpack(): PositionUpdateT {
		return new PositionUpdateT(
			this.teamId(),
			this.instrumentId(),
			this.posLots(),
			this.openBuyLots(),
			this.openSellLots(),
			this.realizedPnlTicks(),
			this.unrealizedPnlTicks(),
			this.headroomLongLots(),
			this.headroomShortLots(),
			this.tsNanos(),
		);
	}

	unpackTo(_o: PositionUpdateT): void {
		_o.teamId = this.teamId();
		_o.instrumentId = this.instrumentId();
		_o.posLots = this.posLots();
		_o.openBuyLots = this.openBuyLots();
		_o.openSellLots = this.openSellLots();
		_o.realizedPnlTicks = this.realizedPnlTicks();
		_o.unrealizedPnlTicks = this.unrealizedPnlTicks();
		_o.headroomLongLots = this.headroomLongLots();
		_o.headroomShortLots = this.headroomShortLots();
		_o.tsNanos = this.tsNanos();
	}
}

export class PositionUpdateT implements flatbuffers.IGeneratedObject {
	constructor(
		public teamId: number = 0,
		public instrumentId: number = 0,
		public posLots: bigint = BigInt("0"),
		public openBuyLots: bigint = BigInt("0"),
		public openSellLots: bigint = BigInt("0"),
		public realizedPnlTicks: bigint = BigInt("0"),
		public unrealizedPnlTicks: bigint = BigInt("0"),
		public headroomLongLots: bigint = BigInt("0"),
		public headroomShortLots: bigint = BigInt("0"),
		public tsNanos: bigint = BigInt("0"),
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		return PositionUpdate.createPositionUpdate(
			builder,
			this.teamId,
			this.instrumentId,
			this.posLots,
			this.openBuyLots,
			this.openSellLots,
			this.realizedPnlTicks,
			this.unrealizedPnlTicks,
			this.headroomLongLots,
			this.headroomShortLots,
			this.tsNanos,
		);
	}
}
