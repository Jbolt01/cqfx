// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

export class SessionEvent
	implements flatbuffers.IUnpackableObject<SessionEventT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): SessionEvent {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsSessionEvent(
		bb: flatbuffers.ByteBuffer,
		obj?: SessionEvent,
	): SessionEvent {
		return (obj || new SessionEvent()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsSessionEvent(
		bb: flatbuffers.ByteBuffer,
		obj?: SessionEvent,
	): SessionEvent {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new SessionEvent()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	sessionId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	roundNo(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
	}

	dayNo(): number {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
	}

	state(): string | null;
	state(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
	state(optionalEncoding?: any): string | Uint8Array | null {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset
			? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
			: null;
	}

	tsNanos(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	static startSessionEvent(builder: flatbuffers.Builder) {
		builder.startObject(5);
	}

	static addSessionId(builder: flatbuffers.Builder, sessionId: number) {
		builder.addFieldInt32(0, sessionId, 0);
	}

	static addRoundNo(builder: flatbuffers.Builder, roundNo: number) {
		builder.addFieldInt16(1, roundNo, 0);
	}

	static addDayNo(builder: flatbuffers.Builder, dayNo: number) {
		builder.addFieldInt16(2, dayNo, 0);
	}

	static addState(
		builder: flatbuffers.Builder,
		stateOffset: flatbuffers.Offset,
	) {
		builder.addFieldOffset(3, stateOffset, 0);
	}

	static addTsNanos(builder: flatbuffers.Builder, tsNanos: bigint) {
		builder.addFieldInt64(4, tsNanos, BigInt("0"));
	}

	static endSessionEvent(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createSessionEvent(
		builder: flatbuffers.Builder,
		sessionId: number,
		roundNo: number,
		dayNo: number,
		stateOffset: flatbuffers.Offset,
		tsNanos: bigint,
	): flatbuffers.Offset {
		SessionEvent.startSessionEvent(builder);
		SessionEvent.addSessionId(builder, sessionId);
		SessionEvent.addRoundNo(builder, roundNo);
		SessionEvent.addDayNo(builder, dayNo);
		SessionEvent.addState(builder, stateOffset);
		SessionEvent.addTsNanos(builder, tsNanos);
		return SessionEvent.endSessionEvent(builder);
	}

	unpack(): SessionEventT {
		return new SessionEventT(
			this.sessionId(),
			this.roundNo(),
			this.dayNo(),
			this.state(),
			this.tsNanos(),
		);
	}

	unpackTo(_o: SessionEventT): void {
		_o.sessionId = this.sessionId();
		_o.roundNo = this.roundNo();
		_o.dayNo = this.dayNo();
		_o.state = this.state();
		_o.tsNanos = this.tsNanos();
	}
}

export class SessionEventT implements flatbuffers.IGeneratedObject {
	constructor(
		public sessionId: number = 0,
		public roundNo: number = 0,
		public dayNo: number = 0,
		public state: string | Uint8Array | null = null,
		public tsNanos: bigint = BigInt("0"),
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		const state = this.state !== null ? builder.createString(this.state!) : 0;

		return SessionEvent.createSessionEvent(
			builder,
			this.sessionId,
			this.roundNo,
			this.dayNo,
			state,
			this.tsNanos,
		);
	}
}
