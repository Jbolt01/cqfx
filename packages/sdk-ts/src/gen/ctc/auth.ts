// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Auth implements flatbuffers.IUnpackableObject<AuthT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Auth {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAuth(bb:flatbuffers.ByteBuffer, obj?:Auth):Auth {
  return (obj || new Auth()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAuth(bb:flatbuffers.ByteBuffer, obj?:Auth):Auth {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Auth()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

jwt():string|null
jwt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jwt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clientName():string|null
clientName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clientName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

protocol():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startAuth(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addJwt(builder:flatbuffers.Builder, jwtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, jwtOffset, 0);
}

static addClientName(builder:flatbuffers.Builder, clientNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, clientNameOffset, 0);
}

static addProtocol(builder:flatbuffers.Builder, protocol:number) {
  builder.addFieldInt32(2, protocol, 0);
}

static endAuth(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAuth(builder:flatbuffers.Builder, jwtOffset:flatbuffers.Offset, clientNameOffset:flatbuffers.Offset, protocol:number):flatbuffers.Offset {
  Auth.startAuth(builder);
  Auth.addJwt(builder, jwtOffset);
  Auth.addClientName(builder, clientNameOffset);
  Auth.addProtocol(builder, protocol);
  return Auth.endAuth(builder);
}

unpack(): AuthT {
  return new AuthT(
    this.jwt(),
    this.clientName(),
    this.protocol()
  );
}


unpackTo(_o: AuthT): void {
  _o.jwt = this.jwt();
  _o.clientName = this.clientName();
  _o.protocol = this.protocol();
}
}

export class AuthT implements flatbuffers.IGeneratedObject {
constructor(
  public jwt: string|Uint8Array|null = null,
  public clientName: string|Uint8Array|null = null,
  public protocol: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const jwt = (this.jwt !== null ? builder.createString(this.jwt!) : 0);
  const clientName = (this.clientName !== null ? builder.createString(this.clientName!) : 0);

  return Auth.createAuth(builder,
    jwt,
    clientName,
    this.protocol
  );
}
}
