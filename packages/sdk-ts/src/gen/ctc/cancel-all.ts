// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CancelAll implements flatbuffers.IUnpackableObject<CancelAllT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CancelAll {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCancelAll(bb:flatbuffers.ByteBuffer, obj?:CancelAll):CancelAll {
  return (obj || new CancelAll()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCancelAll(bb:flatbuffers.ByteBuffer, obj?:CancelAll):CancelAll {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CancelAll()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

teamId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startCancelAll(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, scopeOffset, 0);
}

static addUserId(builder:flatbuffers.Builder, userId:number) {
  builder.addFieldInt32(1, userId, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamId:number) {
  builder.addFieldInt32(2, teamId, 0);
}

static endCancelAll(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCancelAll(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset, userId:number, teamId:number):flatbuffers.Offset {
  CancelAll.startCancelAll(builder);
  CancelAll.addScope(builder, scopeOffset);
  CancelAll.addUserId(builder, userId);
  CancelAll.addTeamId(builder, teamId);
  return CancelAll.endCancelAll(builder);
}

unpack(): CancelAllT {
  return new CancelAllT(
    this.scope(),
    this.userId(),
    this.teamId()
  );
}


unpackTo(_o: CancelAllT): void {
  _o.scope = this.scope();
  _o.userId = this.userId();
  _o.teamId = this.teamId();
}
}

export class CancelAllT implements flatbuffers.IGeneratedObject {
constructor(
  public scope: string|Uint8Array|null = null,
  public userId: number = 0,
  public teamId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const scope = (this.scope !== null ? builder.createString(this.scope!) : 0);

  return CancelAll.createCancelAll(builder,
    scope,
    this.userId,
    this.teamId
  );
}
}
