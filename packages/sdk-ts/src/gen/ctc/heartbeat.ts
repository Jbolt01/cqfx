// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

export class Heartbeat implements flatbuffers.IUnpackableObject<HeartbeatT> {
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): Heartbeat {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsHeartbeat(
		bb: flatbuffers.ByteBuffer,
		obj?: Heartbeat,
	): Heartbeat {
		return (obj || new Heartbeat()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsHeartbeat(
		bb: flatbuffers.ByteBuffer,
		obj?: Heartbeat,
	): Heartbeat {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new Heartbeat()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	nonce(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	static startHeartbeat(builder: flatbuffers.Builder) {
		builder.startObject(1);
	}

	static addNonce(builder: flatbuffers.Builder, nonce: bigint) {
		builder.addFieldInt64(0, nonce, BigInt("0"));
	}

	static endHeartbeat(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createHeartbeat(
		builder: flatbuffers.Builder,
		nonce: bigint,
	): flatbuffers.Offset {
		Heartbeat.startHeartbeat(builder);
		Heartbeat.addNonce(builder, nonce);
		return Heartbeat.endHeartbeat(builder);
	}

	unpack(): HeartbeatT {
		return new HeartbeatT(this.nonce());
	}

	unpackTo(_o: HeartbeatT): void {
		_o.nonce = this.nonce();
	}
}

export class HeartbeatT implements flatbuffers.IGeneratedObject {
	constructor(public nonce: bigint = BigInt("0")) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		return Heartbeat.createHeartbeat(builder, this.nonce);
	}
}
