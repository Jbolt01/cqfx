// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ExecType } from '../ctc/exec-type.js';
import { RejectCode } from '../ctc/reject-code.js';


export class Ack implements flatbuffers.IUnpackableObject<AckT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Ack {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAck(bb:flatbuffers.ByteBuffer, obj?:Ack):Ack {
  return (obj || new Ack()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAck(bb:flatbuffers.ByteBuffer, obj?:Ack):Ack {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Ack()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

execType():ExecType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ExecType.Ack;
}

clOrdId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

orderId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

instrumentId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

filledLots():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

leavesLots():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

avgPxTicks():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rejectCode():RejectCode {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : RejectCode.None;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tsNanos():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startAck(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addExecType(builder:flatbuffers.Builder, execType:ExecType) {
  builder.addFieldInt8(0, execType, ExecType.Ack);
}

static addClOrdId(builder:flatbuffers.Builder, clOrdId:bigint) {
  builder.addFieldInt64(1, clOrdId, BigInt('0'));
}

static addOrderId(builder:flatbuffers.Builder, orderId:bigint) {
  builder.addFieldInt64(2, orderId, BigInt('0'));
}

static addInstrumentId(builder:flatbuffers.Builder, instrumentId:number) {
  builder.addFieldInt32(3, instrumentId, 0);
}

static addFilledLots(builder:flatbuffers.Builder, filledLots:bigint) {
  builder.addFieldInt64(4, filledLots, BigInt('0'));
}

static addLeavesLots(builder:flatbuffers.Builder, leavesLots:bigint) {
  builder.addFieldInt64(5, leavesLots, BigInt('0'));
}

static addAvgPxTicks(builder:flatbuffers.Builder, avgPxTicks:number) {
  builder.addFieldInt32(6, avgPxTicks, 0);
}

static addRejectCode(builder:flatbuffers.Builder, rejectCode:RejectCode) {
  builder.addFieldInt16(7, rejectCode, RejectCode.None);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, textOffset, 0);
}

static addTsNanos(builder:flatbuffers.Builder, tsNanos:bigint) {
  builder.addFieldInt64(9, tsNanos, BigInt('0'));
}

static endAck(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAck(builder:flatbuffers.Builder, execType:ExecType, clOrdId:bigint, orderId:bigint, instrumentId:number, filledLots:bigint, leavesLots:bigint, avgPxTicks:number, rejectCode:RejectCode, textOffset:flatbuffers.Offset, tsNanos:bigint):flatbuffers.Offset {
  Ack.startAck(builder);
  Ack.addExecType(builder, execType);
  Ack.addClOrdId(builder, clOrdId);
  Ack.addOrderId(builder, orderId);
  Ack.addInstrumentId(builder, instrumentId);
  Ack.addFilledLots(builder, filledLots);
  Ack.addLeavesLots(builder, leavesLots);
  Ack.addAvgPxTicks(builder, avgPxTicks);
  Ack.addRejectCode(builder, rejectCode);
  Ack.addText(builder, textOffset);
  Ack.addTsNanos(builder, tsNanos);
  return Ack.endAck(builder);
}

unpack(): AckT {
  return new AckT(
    this.execType(),
    this.clOrdId(),
    this.orderId(),
    this.instrumentId(),
    this.filledLots(),
    this.leavesLots(),
    this.avgPxTicks(),
    this.rejectCode(),
    this.text(),
    this.tsNanos()
  );
}


unpackTo(_o: AckT): void {
  _o.execType = this.execType();
  _o.clOrdId = this.clOrdId();
  _o.orderId = this.orderId();
  _o.instrumentId = this.instrumentId();
  _o.filledLots = this.filledLots();
  _o.leavesLots = this.leavesLots();
  _o.avgPxTicks = this.avgPxTicks();
  _o.rejectCode = this.rejectCode();
  _o.text = this.text();
  _o.tsNanos = this.tsNanos();
}
}

export class AckT implements flatbuffers.IGeneratedObject {
constructor(
  public execType: ExecType = ExecType.Ack,
  public clOrdId: bigint = BigInt('0'),
  public orderId: bigint = BigInt('0'),
  public instrumentId: number = 0,
  public filledLots: bigint = BigInt('0'),
  public leavesLots: bigint = BigInt('0'),
  public avgPxTicks: number = 0,
  public rejectCode: RejectCode = RejectCode.None,
  public text: string|Uint8Array|null = null,
  public tsNanos: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const text = (this.text !== null ? builder.createString(this.text!) : 0);

  return Ack.createAck(builder,
    this.execType,
    this.clOrdId,
    this.orderId,
    this.instrumentId,
    this.filledLots,
    this.leavesLots,
    this.avgPxTicks,
    this.rejectCode,
    text,
    this.tsNanos
  );
}
}
