// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

import { EtfLeg, EtfLegT } from "../ctc/etf-leg.js";
import { RejectCode } from "../ctc/reject-code.js";

export class ETFCreateRedeemResult
	implements flatbuffers.IUnpackableObject<ETFCreateRedeemResultT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): ETFCreateRedeemResult {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsETFCreateRedeemResult(
		bb: flatbuffers.ByteBuffer,
		obj?: ETFCreateRedeemResult,
	): ETFCreateRedeemResult {
		return (obj || new ETFCreateRedeemResult()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsETFCreateRedeemResult(
		bb: flatbuffers.ByteBuffer,
		obj?: ETFCreateRedeemResult,
	): ETFCreateRedeemResult {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new ETFCreateRedeemResult()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	requestId(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	etfInstrumentId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	lots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	legs(index: number, obj?: EtfLeg): EtfLeg | null {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset
			? (obj || new EtfLeg()).__init(
					this.bb!.__indirect(
						this.bb!.__vector(this.bb_pos + offset) + index * 4,
					),
					this.bb!,
				)
			: null;
	}

	legsLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	success(): boolean {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
	}

	rejectCode(): RejectCode {
		const offset = this.bb!.__offset(this.bb_pos, 14);
		return offset ? this.bb!.readUint16(this.bb_pos + offset) : RejectCode.None;
	}

	text(): string | null;
	text(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
	text(optionalEncoding?: any): string | Uint8Array | null {
		const offset = this.bb!.__offset(this.bb_pos, 16);
		return offset
			? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
			: null;
	}

	tsNanos(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 18);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	static startETFCreateRedeemResult(builder: flatbuffers.Builder) {
		builder.startObject(8);
	}

	static addRequestId(builder: flatbuffers.Builder, requestId: bigint) {
		builder.addFieldInt64(0, requestId, BigInt("0"));
	}

	static addEtfInstrumentId(
		builder: flatbuffers.Builder,
		etfInstrumentId: number,
	) {
		builder.addFieldInt32(1, etfInstrumentId, 0);
	}

	static addLots(builder: flatbuffers.Builder, lots: bigint) {
		builder.addFieldInt64(2, lots, BigInt("0"));
	}

	static addLegs(builder: flatbuffers.Builder, legsOffset: flatbuffers.Offset) {
		builder.addFieldOffset(3, legsOffset, 0);
	}

	static createLegsVector(
		builder: flatbuffers.Builder,
		data: flatbuffers.Offset[],
	): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startLegsVector(builder: flatbuffers.Builder, numElems: number) {
		builder.startVector(4, numElems, 4);
	}

	static addSuccess(builder: flatbuffers.Builder, success: boolean) {
		builder.addFieldInt8(4, +success, +false);
	}

	static addRejectCode(builder: flatbuffers.Builder, rejectCode: RejectCode) {
		builder.addFieldInt16(5, rejectCode, RejectCode.None);
	}

	static addText(builder: flatbuffers.Builder, textOffset: flatbuffers.Offset) {
		builder.addFieldOffset(6, textOffset, 0);
	}

	static addTsNanos(builder: flatbuffers.Builder, tsNanos: bigint) {
		builder.addFieldInt64(7, tsNanos, BigInt("0"));
	}

	static endETFCreateRedeemResult(
		builder: flatbuffers.Builder,
	): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createETFCreateRedeemResult(
		builder: flatbuffers.Builder,
		requestId: bigint,
		etfInstrumentId: number,
		lots: bigint,
		legsOffset: flatbuffers.Offset,
		success: boolean,
		rejectCode: RejectCode,
		textOffset: flatbuffers.Offset,
		tsNanos: bigint,
	): flatbuffers.Offset {
		ETFCreateRedeemResult.startETFCreateRedeemResult(builder);
		ETFCreateRedeemResult.addRequestId(builder, requestId);
		ETFCreateRedeemResult.addEtfInstrumentId(builder, etfInstrumentId);
		ETFCreateRedeemResult.addLots(builder, lots);
		ETFCreateRedeemResult.addLegs(builder, legsOffset);
		ETFCreateRedeemResult.addSuccess(builder, success);
		ETFCreateRedeemResult.addRejectCode(builder, rejectCode);
		ETFCreateRedeemResult.addText(builder, textOffset);
		ETFCreateRedeemResult.addTsNanos(builder, tsNanos);
		return ETFCreateRedeemResult.endETFCreateRedeemResult(builder);
	}

	unpack(): ETFCreateRedeemResultT {
		return new ETFCreateRedeemResultT(
			this.requestId(),
			this.etfInstrumentId(),
			this.lots(),
			this.bb!.createObjList<EtfLeg, EtfLegT>(
				this.legs.bind(this),
				this.legsLength(),
			),
			this.success(),
			this.rejectCode(),
			this.text(),
			this.tsNanos(),
		);
	}

	unpackTo(_o: ETFCreateRedeemResultT): void {
		_o.requestId = this.requestId();
		_o.etfInstrumentId = this.etfInstrumentId();
		_o.lots = this.lots();
		_o.legs = this.bb!.createObjList<EtfLeg, EtfLegT>(
			this.legs.bind(this),
			this.legsLength(),
		);
		_o.success = this.success();
		_o.rejectCode = this.rejectCode();
		_o.text = this.text();
		_o.tsNanos = this.tsNanos();
	}
}

export class ETFCreateRedeemResultT implements flatbuffers.IGeneratedObject {
	constructor(
		public requestId: bigint = BigInt("0"),
		public etfInstrumentId: number = 0,
		public lots: bigint = BigInt("0"),
		public legs: EtfLegT[] = [],
		public success: boolean = false,
		public rejectCode: RejectCode = RejectCode.None,
		public text: string | Uint8Array | null = null,
		public tsNanos: bigint = BigInt("0"),
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		const legs = ETFCreateRedeemResult.createLegsVector(
			builder,
			builder.createObjectOffsetList(this.legs),
		);
		const text = this.text !== null ? builder.createString(this.text!) : 0;

		return ETFCreateRedeemResult.createETFCreateRedeemResult(
			builder,
			this.requestId,
			this.etfInstrumentId,
			this.lots,
			legs,
			this.success,
			this.rejectCode,
			text,
			this.tsNanos,
		);
	}
}
