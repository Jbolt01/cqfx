// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

export class EtfComponent
	implements flatbuffers.IUnpackableObject<EtfComponentT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): EtfComponent {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsEtfComponent(
		bb: flatbuffers.ByteBuffer,
		obj?: EtfComponent,
	): EtfComponent {
		return (obj || new EtfComponent()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsEtfComponent(
		bb: flatbuffers.ByteBuffer,
		obj?: EtfComponent,
	): EtfComponent {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new EtfComponent()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	etfInstrumentId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	componentInstrumentId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	weightNum(): number {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
	}

	weightDen(): number {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
	}

	static startEtfComponent(builder: flatbuffers.Builder) {
		builder.startObject(4);
	}

	static addEtfInstrumentId(
		builder: flatbuffers.Builder,
		etfInstrumentId: number,
	) {
		builder.addFieldInt32(0, etfInstrumentId, 0);
	}

	static addComponentInstrumentId(
		builder: flatbuffers.Builder,
		componentInstrumentId: number,
	) {
		builder.addFieldInt32(1, componentInstrumentId, 0);
	}

	static addWeightNum(builder: flatbuffers.Builder, weightNum: number) {
		builder.addFieldInt32(2, weightNum, 0);
	}

	static addWeightDen(builder: flatbuffers.Builder, weightDen: number) {
		builder.addFieldInt32(3, weightDen, 0);
	}

	static endEtfComponent(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createEtfComponent(
		builder: flatbuffers.Builder,
		etfInstrumentId: number,
		componentInstrumentId: number,
		weightNum: number,
		weightDen: number,
	): flatbuffers.Offset {
		EtfComponent.startEtfComponent(builder);
		EtfComponent.addEtfInstrumentId(builder, etfInstrumentId);
		EtfComponent.addComponentInstrumentId(builder, componentInstrumentId);
		EtfComponent.addWeightNum(builder, weightNum);
		EtfComponent.addWeightDen(builder, weightDen);
		return EtfComponent.endEtfComponent(builder);
	}

	unpack(): EtfComponentT {
		return new EtfComponentT(
			this.etfInstrumentId(),
			this.componentInstrumentId(),
			this.weightNum(),
			this.weightDen(),
		);
	}

	unpackTo(_o: EtfComponentT): void {
		_o.etfInstrumentId = this.etfInstrumentId();
		_o.componentInstrumentId = this.componentInstrumentId();
		_o.weightNum = this.weightNum();
		_o.weightDen = this.weightDen();
	}
}

export class EtfComponentT implements flatbuffers.IGeneratedObject {
	constructor(
		public etfInstrumentId: number = 0,
		public componentInstrumentId: number = 0,
		public weightNum: number = 0,
		public weightDen: number = 0,
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		return EtfComponent.createEtfComponent(
			builder,
			this.etfInstrumentId,
			this.componentInstrumentId,
			this.weightNum,
			this.weightDen,
		);
	}
}
