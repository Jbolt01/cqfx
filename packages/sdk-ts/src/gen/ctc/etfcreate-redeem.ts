// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

export class ETFCreateRedeem
	implements flatbuffers.IUnpackableObject<ETFCreateRedeemT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): ETFCreateRedeem {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsETFCreateRedeem(
		bb: flatbuffers.ByteBuffer,
		obj?: ETFCreateRedeem,
	): ETFCreateRedeem {
		return (obj || new ETFCreateRedeem()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsETFCreateRedeem(
		bb: flatbuffers.ByteBuffer,
		obj?: ETFCreateRedeem,
	): ETFCreateRedeem {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new ETFCreateRedeem()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	requestId(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	etfInstrumentId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	lots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	userId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	teamId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	static startETFCreateRedeem(builder: flatbuffers.Builder) {
		builder.startObject(5);
	}

	static addRequestId(builder: flatbuffers.Builder, requestId: bigint) {
		builder.addFieldInt64(0, requestId, BigInt("0"));
	}

	static addEtfInstrumentId(
		builder: flatbuffers.Builder,
		etfInstrumentId: number,
	) {
		builder.addFieldInt32(1, etfInstrumentId, 0);
	}

	static addLots(builder: flatbuffers.Builder, lots: bigint) {
		builder.addFieldInt64(2, lots, BigInt("0"));
	}

	static addUserId(builder: flatbuffers.Builder, userId: number) {
		builder.addFieldInt32(3, userId, 0);
	}

	static addTeamId(builder: flatbuffers.Builder, teamId: number) {
		builder.addFieldInt32(4, teamId, 0);
	}

	static endETFCreateRedeem(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createETFCreateRedeem(
		builder: flatbuffers.Builder,
		requestId: bigint,
		etfInstrumentId: number,
		lots: bigint,
		userId: number,
		teamId: number,
	): flatbuffers.Offset {
		ETFCreateRedeem.startETFCreateRedeem(builder);
		ETFCreateRedeem.addRequestId(builder, requestId);
		ETFCreateRedeem.addEtfInstrumentId(builder, etfInstrumentId);
		ETFCreateRedeem.addLots(builder, lots);
		ETFCreateRedeem.addUserId(builder, userId);
		ETFCreateRedeem.addTeamId(builder, teamId);
		return ETFCreateRedeem.endETFCreateRedeem(builder);
	}

	unpack(): ETFCreateRedeemT {
		return new ETFCreateRedeemT(
			this.requestId(),
			this.etfInstrumentId(),
			this.lots(),
			this.userId(),
			this.teamId(),
		);
	}

	unpackTo(_o: ETFCreateRedeemT): void {
		_o.requestId = this.requestId();
		_o.etfInstrumentId = this.etfInstrumentId();
		_o.lots = this.lots();
		_o.userId = this.userId();
		_o.teamId = this.teamId();
	}
}

export class ETFCreateRedeemT implements flatbuffers.IGeneratedObject {
	constructor(
		public requestId: bigint = BigInt("0"),
		public etfInstrumentId: number = 0,
		public lots: bigint = BigInt("0"),
		public userId: number = 0,
		public teamId: number = 0,
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		return ETFCreateRedeem.createETFCreateRedeem(
			builder,
			this.requestId,
			this.etfInstrumentId,
			this.lots,
			this.userId,
			this.teamId,
		);
	}
}
