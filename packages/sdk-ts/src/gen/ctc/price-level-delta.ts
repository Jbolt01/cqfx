// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

import { Side } from "../ctc/side.js";

export class PriceLevelDelta
	implements flatbuffers.IUnpackableObject<PriceLevelDeltaT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): PriceLevelDelta {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsPriceLevelDelta(
		bb: flatbuffers.ByteBuffer,
		obj?: PriceLevelDelta,
	): PriceLevelDelta {
		return (obj || new PriceLevelDelta()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsPriceLevelDelta(
		bb: flatbuffers.ByteBuffer,
		obj?: PriceLevelDelta,
	): PriceLevelDelta {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new PriceLevelDelta()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	side(): Side {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint8(this.bb_pos + offset) : Side.Buy;
	}

	pxTicks(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
	}

	deltaLots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	static startPriceLevelDelta(builder: flatbuffers.Builder) {
		builder.startObject(3);
	}

	static addSide(builder: flatbuffers.Builder, side: Side) {
		builder.addFieldInt8(0, side, Side.Buy);
	}

	static addPxTicks(builder: flatbuffers.Builder, pxTicks: number) {
		builder.addFieldInt32(1, pxTicks, 0);
	}

	static addDeltaLots(builder: flatbuffers.Builder, deltaLots: bigint) {
		builder.addFieldInt64(2, deltaLots, BigInt("0"));
	}

	static endPriceLevelDelta(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createPriceLevelDelta(
		builder: flatbuffers.Builder,
		side: Side,
		pxTicks: number,
		deltaLots: bigint,
	): flatbuffers.Offset {
		PriceLevelDelta.startPriceLevelDelta(builder);
		PriceLevelDelta.addSide(builder, side);
		PriceLevelDelta.addPxTicks(builder, pxTicks);
		PriceLevelDelta.addDeltaLots(builder, deltaLots);
		return PriceLevelDelta.endPriceLevelDelta(builder);
	}

	unpack(): PriceLevelDeltaT {
		return new PriceLevelDeltaT(this.side(), this.pxTicks(), this.deltaLots());
	}

	unpackTo(_o: PriceLevelDeltaT): void {
		_o.side = this.side();
		_o.pxTicks = this.pxTicks();
		_o.deltaLots = this.deltaLots();
	}
}

export class PriceLevelDeltaT implements flatbuffers.IGeneratedObject {
	constructor(
		public side: Side = Side.Buy,
		public pxTicks: number = 0,
		public deltaLots: bigint = BigInt("0"),
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		return PriceLevelDelta.createPriceLevelDelta(
			builder,
			this.side,
			this.pxTicks,
			this.deltaLots,
		);
	}
}
