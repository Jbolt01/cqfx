// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

import { Side } from "../ctc/side.js";

export class Trade implements flatbuffers.IUnpackableObject<TradeT> {
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): Trade {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsTrade(bb: flatbuffers.ByteBuffer, obj?: Trade): Trade {
		return (obj || new Trade()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsTrade(
		bb: flatbuffers.ByteBuffer,
		obj?: Trade,
	): Trade {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new Trade()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	instrumentId(): number {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
	}

	tradeId(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	pxTicks(): number {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
	}

	lots(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
	}

	aggressor(): Side {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset ? this.bb!.readUint8(this.bb_pos + offset) : Side.Buy;
	}

	tsNanos(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 14);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	matchId(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 16);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	static startTrade(builder: flatbuffers.Builder) {
		builder.startObject(7);
	}

	static addInstrumentId(builder: flatbuffers.Builder, instrumentId: number) {
		builder.addFieldInt32(0, instrumentId, 0);
	}

	static addTradeId(builder: flatbuffers.Builder, tradeId: bigint) {
		builder.addFieldInt64(1, tradeId, BigInt("0"));
	}

	static addPxTicks(builder: flatbuffers.Builder, pxTicks: number) {
		builder.addFieldInt32(2, pxTicks, 0);
	}

	static addLots(builder: flatbuffers.Builder, lots: bigint) {
		builder.addFieldInt64(3, lots, BigInt("0"));
	}

	static addAggressor(builder: flatbuffers.Builder, aggressor: Side) {
		builder.addFieldInt8(4, aggressor, Side.Buy);
	}

	static addTsNanos(builder: flatbuffers.Builder, tsNanos: bigint) {
		builder.addFieldInt64(5, tsNanos, BigInt("0"));
	}

	static addMatchId(builder: flatbuffers.Builder, matchId: bigint) {
		builder.addFieldInt64(6, matchId, BigInt("0"));
	}

	static endTrade(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createTrade(
		builder: flatbuffers.Builder,
		instrumentId: number,
		tradeId: bigint,
		pxTicks: number,
		lots: bigint,
		aggressor: Side,
		tsNanos: bigint,
		matchId: bigint,
	): flatbuffers.Offset {
		Trade.startTrade(builder);
		Trade.addInstrumentId(builder, instrumentId);
		Trade.addTradeId(builder, tradeId);
		Trade.addPxTicks(builder, pxTicks);
		Trade.addLots(builder, lots);
		Trade.addAggressor(builder, aggressor);
		Trade.addTsNanos(builder, tsNanos);
		Trade.addMatchId(builder, matchId);
		return Trade.endTrade(builder);
	}

	unpack(): TradeT {
		return new TradeT(
			this.instrumentId(),
			this.tradeId(),
			this.pxTicks(),
			this.lots(),
			this.aggressor(),
			this.tsNanos(),
			this.matchId(),
		);
	}

	unpackTo(_o: TradeT): void {
		_o.instrumentId = this.instrumentId();
		_o.tradeId = this.tradeId();
		_o.pxTicks = this.pxTicks();
		_o.lots = this.lots();
		_o.aggressor = this.aggressor();
		_o.tsNanos = this.tsNanos();
		_o.matchId = this.matchId();
	}
}

export class TradeT implements flatbuffers.IGeneratedObject {
	constructor(
		public instrumentId: number = 0,
		public tradeId: bigint = BigInt("0"),
		public pxTicks: number = 0,
		public lots: bigint = BigInt("0"),
		public aggressor: Side = Side.Buy,
		public tsNanos: bigint = BigInt("0"),
		public matchId: bigint = BigInt("0"),
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		return Trade.createTrade(
			builder,
			this.instrumentId,
			this.tradeId,
			this.pxTicks,
			this.lots,
			this.aggressor,
			this.tsNanos,
			this.matchId,
		);
	}
}
