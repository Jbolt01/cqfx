// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Ack, AckT } from '../ctc/ack.js';
import { Auth, AuthT } from '../ctc/auth.js';
import { BookDelta, BookDeltaT } from '../ctc/book-delta.js';
import { CancelAll, CancelAllT } from '../ctc/cancel-all.js';
import { ConfigSnapshot, ConfigSnapshotT } from '../ctc/config-snapshot.js';
import { ETFCreateRedeem, ETFCreateRedeemT } from '../ctc/etfcreate-redeem.js';
import { ETFCreateRedeemResult, ETFCreateRedeemResultT } from '../ctc/etfcreate-redeem-result.js';
import { Heartbeat, HeartbeatT } from '../ctc/heartbeat.js';
import { OrderCancel, OrderCancelT } from '../ctc/order-cancel.js';
import { OrderNew, OrderNewT } from '../ctc/order-new.js';
import { OrderReplace, OrderReplaceT } from '../ctc/order-replace.js';
import { Payload, unionToPayload, unionListToPayload } from '../ctc/payload.js';
import { PositionUpdate, PositionUpdateT } from '../ctc/position-update.js';
import { SessionEvent, SessionEventT } from '../ctc/session-event.js';
import { Subscribe, SubscribeT } from '../ctc/subscribe.js';
import { Trade, TradeT } from '../ctc/trade.js';
import { Unsubscribe, UnsubscribeT } from '../ctc/unsubscribe.js';


export class Message implements flatbuffers.IUnpackableObject<MessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CTC1');
}

schemaVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

payloadType():Payload {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Payload.NONE;
}

payload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSchemaVersion(builder:flatbuffers.Builder, schemaVersion:number) {
  builder.addFieldInt16(0, schemaVersion, 0);
}

static addPayloadType(builder:flatbuffers.Builder, payloadType:Payload) {
  builder.addFieldInt8(1, payloadType, Payload.NONE);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, payloadOffset, 0);
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CTC1');
}

static finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CTC1', true);
}

static createMessage(builder:flatbuffers.Builder, schemaVersion:number, payloadType:Payload, payloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  Message.startMessage(builder);
  Message.addSchemaVersion(builder, schemaVersion);
  Message.addPayloadType(builder, payloadType);
  Message.addPayload(builder, payloadOffset);
  return Message.endMessage(builder);
}

unpack(): MessageT {
  return new MessageT(
    this.schemaVersion(),
    this.payloadType(),
    (() => {
      const temp = unionToPayload(this.payloadType(), this.payload.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: MessageT): void {
  _o.schemaVersion = this.schemaVersion();
  _o.payloadType = this.payloadType();
  _o.payload = (() => {
      const temp = unionToPayload(this.payloadType(), this.payload.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class MessageT implements flatbuffers.IGeneratedObject {
constructor(
  public schemaVersion: number = 0,
  public payloadType: Payload = Payload.NONE,
  public payload: AckT|AuthT|BookDeltaT|CancelAllT|ConfigSnapshotT|ETFCreateRedeemResultT|ETFCreateRedeemT|HeartbeatT|OrderCancelT|OrderNewT|OrderReplaceT|PositionUpdateT|SessionEventT|SubscribeT|TradeT|UnsubscribeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const payload = builder.createObjectOffset(this.payload);

  return Message.createMessage(builder,
    this.schemaVersion,
    this.payloadType,
    payload
  );
}
}
