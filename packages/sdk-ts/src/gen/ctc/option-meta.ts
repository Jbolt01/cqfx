// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class OptionMeta implements flatbuffers.IUnpackableObject<OptionMetaT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OptionMeta {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOptionMeta(bb:flatbuffers.ByteBuffer, obj?:OptionMeta):OptionMeta {
  return (obj || new OptionMeta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOptionMeta(bb:flatbuffers.ByteBuffer, obj?:OptionMeta):OptionMeta {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OptionMeta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

instrumentId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

underlyingInstrumentId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

strikeTicks():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

right():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

expiryEpochDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

multiplier():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startOptionMeta(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addInstrumentId(builder:flatbuffers.Builder, instrumentId:number) {
  builder.addFieldInt32(0, instrumentId, 0);
}

static addUnderlyingInstrumentId(builder:flatbuffers.Builder, underlyingInstrumentId:number) {
  builder.addFieldInt32(1, underlyingInstrumentId, 0);
}

static addStrikeTicks(builder:flatbuffers.Builder, strikeTicks:number) {
  builder.addFieldInt32(2, strikeTicks, 0);
}

static addRight(builder:flatbuffers.Builder, right:number) {
  builder.addFieldInt8(3, right, 0);
}

static addExpiryEpochDays(builder:flatbuffers.Builder, expiryEpochDays:number) {
  builder.addFieldInt32(4, expiryEpochDays, 0);
}

static addMultiplier(builder:flatbuffers.Builder, multiplier:number) {
  builder.addFieldInt32(5, multiplier, 0);
}

static endOptionMeta(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOptionMeta(builder:flatbuffers.Builder, instrumentId:number, underlyingInstrumentId:number, strikeTicks:number, right:number, expiryEpochDays:number, multiplier:number):flatbuffers.Offset {
  OptionMeta.startOptionMeta(builder);
  OptionMeta.addInstrumentId(builder, instrumentId);
  OptionMeta.addUnderlyingInstrumentId(builder, underlyingInstrumentId);
  OptionMeta.addStrikeTicks(builder, strikeTicks);
  OptionMeta.addRight(builder, right);
  OptionMeta.addExpiryEpochDays(builder, expiryEpochDays);
  OptionMeta.addMultiplier(builder, multiplier);
  return OptionMeta.endOptionMeta(builder);
}

unpack(): OptionMetaT {
  return new OptionMetaT(
    this.instrumentId(),
    this.underlyingInstrumentId(),
    this.strikeTicks(),
    this.right(),
    this.expiryEpochDays(),
    this.multiplier()
  );
}


unpackTo(_o: OptionMetaT): void {
  _o.instrumentId = this.instrumentId();
  _o.underlyingInstrumentId = this.underlyingInstrumentId();
  _o.strikeTicks = this.strikeTicks();
  _o.right = this.right();
  _o.expiryEpochDays = this.expiryEpochDays();
  _o.multiplier = this.multiplier();
}
}

export class OptionMetaT implements flatbuffers.IGeneratedObject {
constructor(
  public instrumentId: number = 0,
  public underlyingInstrumentId: number = 0,
  public strikeTicks: number = 0,
  public right: number = 0,
  public expiryEpochDays: number = 0,
  public multiplier: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return OptionMeta.createOptionMeta(builder,
    this.instrumentId,
    this.underlyingInstrumentId,
    this.strikeTicks,
    this.right,
    this.expiryEpochDays,
    this.multiplier
  );
}
}
