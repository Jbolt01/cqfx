// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class OrderReplace implements flatbuffers.IUnpackableObject<OrderReplaceT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrderReplace {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrderReplace(bb:flatbuffers.ByteBuffer, obj?:OrderReplace):OrderReplace {
  return (obj || new OrderReplace()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrderReplace(bb:flatbuffers.ByteBuffer, obj?:OrderReplace):OrderReplace {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrderReplace()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

origClOrdId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

newClOrdId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

instrumentId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

pxTicks():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lots():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

minFillLots():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

postOnly():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

userId():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

teamId():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startOrderReplace(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addOrigClOrdId(builder:flatbuffers.Builder, origClOrdId:bigint) {
  builder.addFieldInt64(0, origClOrdId, BigInt('0'));
}

static addNewClOrdId(builder:flatbuffers.Builder, newClOrdId:bigint) {
  builder.addFieldInt64(1, newClOrdId, BigInt('0'));
}

static addInstrumentId(builder:flatbuffers.Builder, instrumentId:number) {
  builder.addFieldInt32(2, instrumentId, 0);
}

static addPxTicks(builder:flatbuffers.Builder, pxTicks:number) {
  builder.addFieldInt32(3, pxTicks, 0);
}

static addLots(builder:flatbuffers.Builder, lots:bigint) {
  builder.addFieldInt64(4, lots, BigInt('0'));
}

static addMinFillLots(builder:flatbuffers.Builder, minFillLots:bigint) {
  builder.addFieldInt64(5, minFillLots, BigInt('0'));
}

static addPostOnly(builder:flatbuffers.Builder, postOnly:boolean) {
  builder.addFieldInt8(6, +postOnly, +false);
}

static addUserId(builder:flatbuffers.Builder, userId:number) {
  builder.addFieldInt32(7, userId, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamId:number) {
  builder.addFieldInt32(8, teamId, 0);
}

static endOrderReplace(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOrderReplace(builder:flatbuffers.Builder, origClOrdId:bigint, newClOrdId:bigint, instrumentId:number, pxTicks:number, lots:bigint, minFillLots:bigint, postOnly:boolean, userId:number, teamId:number):flatbuffers.Offset {
  OrderReplace.startOrderReplace(builder);
  OrderReplace.addOrigClOrdId(builder, origClOrdId);
  OrderReplace.addNewClOrdId(builder, newClOrdId);
  OrderReplace.addInstrumentId(builder, instrumentId);
  OrderReplace.addPxTicks(builder, pxTicks);
  OrderReplace.addLots(builder, lots);
  OrderReplace.addMinFillLots(builder, minFillLots);
  OrderReplace.addPostOnly(builder, postOnly);
  OrderReplace.addUserId(builder, userId);
  OrderReplace.addTeamId(builder, teamId);
  return OrderReplace.endOrderReplace(builder);
}

unpack(): OrderReplaceT {
  return new OrderReplaceT(
    this.origClOrdId(),
    this.newClOrdId(),
    this.instrumentId(),
    this.pxTicks(),
    this.lots(),
    this.minFillLots(),
    this.postOnly(),
    this.userId(),
    this.teamId()
  );
}


unpackTo(_o: OrderReplaceT): void {
  _o.origClOrdId = this.origClOrdId();
  _o.newClOrdId = this.newClOrdId();
  _o.instrumentId = this.instrumentId();
  _o.pxTicks = this.pxTicks();
  _o.lots = this.lots();
  _o.minFillLots = this.minFillLots();
  _o.postOnly = this.postOnly();
  _o.userId = this.userId();
  _o.teamId = this.teamId();
}
}

export class OrderReplaceT implements flatbuffers.IGeneratedObject {
constructor(
  public origClOrdId: bigint = BigInt('0'),
  public newClOrdId: bigint = BigInt('0'),
  public instrumentId: number = 0,
  public pxTicks: number = 0,
  public lots: bigint = BigInt('0'),
  public minFillLots: bigint = BigInt('0'),
  public postOnly: boolean = false,
  public userId: number = 0,
  public teamId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return OrderReplace.createOrderReplace(builder,
    this.origClOrdId,
    this.newClOrdId,
    this.instrumentId,
    this.pxTicks,
    this.lots,
    this.minFillLots,
    this.postOnly,
    this.userId,
    this.teamId
  );
}
}
