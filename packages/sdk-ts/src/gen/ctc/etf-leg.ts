// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class EtfLeg implements flatbuffers.IUnpackableObject<EtfLegT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EtfLeg {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEtfLeg(bb:flatbuffers.ByteBuffer, obj?:EtfLeg):EtfLeg {
  return (obj || new EtfLeg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEtfLeg(bb:flatbuffers.ByteBuffer, obj?:EtfLeg):EtfLeg {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EtfLeg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

instrumentId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

lots():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startEtfLeg(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addInstrumentId(builder:flatbuffers.Builder, instrumentId:number) {
  builder.addFieldInt32(0, instrumentId, 0);
}

static addLots(builder:flatbuffers.Builder, lots:bigint) {
  builder.addFieldInt64(1, lots, BigInt('0'));
}

static endEtfLeg(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEtfLeg(builder:flatbuffers.Builder, instrumentId:number, lots:bigint):flatbuffers.Offset {
  EtfLeg.startEtfLeg(builder);
  EtfLeg.addInstrumentId(builder, instrumentId);
  EtfLeg.addLots(builder, lots);
  return EtfLeg.endEtfLeg(builder);
}

unpack(): EtfLegT {
  return new EtfLegT(
    this.instrumentId(),
    this.lots()
  );
}


unpackTo(_o: EtfLegT): void {
  _o.instrumentId = this.instrumentId();
  _o.lots = this.lots();
}
}

export class EtfLegT implements flatbuffers.IGeneratedObject {
constructor(
  public instrumentId: number = 0,
  public lots: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return EtfLeg.createEtfLeg(builder,
    this.instrumentId,
    this.lots
  );
}
}
