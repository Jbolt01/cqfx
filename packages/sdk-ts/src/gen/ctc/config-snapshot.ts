// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

import { EtfComponent, EtfComponentT } from "../ctc/etf-component.js";
import { Instrument, InstrumentT } from "../ctc/instrument.js";
import { OptionMeta, OptionMetaT } from "../ctc/option-meta.js";
import { RiskLimit, RiskLimitT } from "../ctc/risk-limit.js";

export class ConfigSnapshot
	implements flatbuffers.IUnpackableObject<ConfigSnapshotT>
{
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): ConfigSnapshot {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsConfigSnapshot(
		bb: flatbuffers.ByteBuffer,
		obj?: ConfigSnapshot,
	): ConfigSnapshot {
		return (obj || new ConfigSnapshot()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	static getSizePrefixedRootAsConfigSnapshot(
		bb: flatbuffers.ByteBuffer,
		obj?: ConfigSnapshot,
	): ConfigSnapshot {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new ConfigSnapshot()).__init(
			bb.readInt32(bb.position()) + bb.position(),
			bb,
		);
	}

	version(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	instruments(index: number, obj?: Instrument): Instrument | null {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset
			? (obj || new Instrument()).__init(
					this.bb!.__indirect(
						this.bb!.__vector(this.bb_pos + offset) + index * 4,
					),
					this.bb!,
				)
			: null;
	}

	instrumentsLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 6);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	etf(index: number, obj?: EtfComponent): EtfComponent | null {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset
			? (obj || new EtfComponent()).__init(
					this.bb!.__indirect(
						this.bb!.__vector(this.bb_pos + offset) + index * 4,
					),
					this.bb!,
				)
			: null;
	}

	etfLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 8);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	options(index: number, obj?: OptionMeta): OptionMeta | null {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset
			? (obj || new OptionMeta()).__init(
					this.bb!.__indirect(
						this.bb!.__vector(this.bb_pos + offset) + index * 4,
					),
					this.bb!,
				)
			: null;
	}

	optionsLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 10);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	riskLimits(index: number, obj?: RiskLimit): RiskLimit | null {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset
			? (obj || new RiskLimit()).__init(
					this.bb!.__indirect(
						this.bb!.__vector(this.bb_pos + offset) + index * 4,
					),
					this.bb!,
				)
			: null;
	}

	riskLimitsLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 12);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	tsNanos(): bigint {
		const offset = this.bb!.__offset(this.bb_pos, 14);
		return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
	}

	static startConfigSnapshot(builder: flatbuffers.Builder) {
		builder.startObject(6);
	}

	static addVersion(builder: flatbuffers.Builder, version: bigint) {
		builder.addFieldInt64(0, version, BigInt("0"));
	}

	static addInstruments(
		builder: flatbuffers.Builder,
		instrumentsOffset: flatbuffers.Offset,
	) {
		builder.addFieldOffset(1, instrumentsOffset, 0);
	}

	static createInstrumentsVector(
		builder: flatbuffers.Builder,
		data: flatbuffers.Offset[],
	): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startInstrumentsVector(
		builder: flatbuffers.Builder,
		numElems: number,
	) {
		builder.startVector(4, numElems, 4);
	}

	static addEtf(builder: flatbuffers.Builder, etfOffset: flatbuffers.Offset) {
		builder.addFieldOffset(2, etfOffset, 0);
	}

	static createEtfVector(
		builder: flatbuffers.Builder,
		data: flatbuffers.Offset[],
	): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startEtfVector(builder: flatbuffers.Builder, numElems: number) {
		builder.startVector(4, numElems, 4);
	}

	static addOptions(
		builder: flatbuffers.Builder,
		optionsOffset: flatbuffers.Offset,
	) {
		builder.addFieldOffset(3, optionsOffset, 0);
	}

	static createOptionsVector(
		builder: flatbuffers.Builder,
		data: flatbuffers.Offset[],
	): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startOptionsVector(builder: flatbuffers.Builder, numElems: number) {
		builder.startVector(4, numElems, 4);
	}

	static addRiskLimits(
		builder: flatbuffers.Builder,
		riskLimitsOffset: flatbuffers.Offset,
	) {
		builder.addFieldOffset(4, riskLimitsOffset, 0);
	}

	static createRiskLimitsVector(
		builder: flatbuffers.Builder,
		data: flatbuffers.Offset[],
	): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startRiskLimitsVector(builder: flatbuffers.Builder, numElems: number) {
		builder.startVector(4, numElems, 4);
	}

	static addTsNanos(builder: flatbuffers.Builder, tsNanos: bigint) {
		builder.addFieldInt64(5, tsNanos, BigInt("0"));
	}

	static endConfigSnapshot(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createConfigSnapshot(
		builder: flatbuffers.Builder,
		version: bigint,
		instrumentsOffset: flatbuffers.Offset,
		etfOffset: flatbuffers.Offset,
		optionsOffset: flatbuffers.Offset,
		riskLimitsOffset: flatbuffers.Offset,
		tsNanos: bigint,
	): flatbuffers.Offset {
		ConfigSnapshot.startConfigSnapshot(builder);
		ConfigSnapshot.addVersion(builder, version);
		ConfigSnapshot.addInstruments(builder, instrumentsOffset);
		ConfigSnapshot.addEtf(builder, etfOffset);
		ConfigSnapshot.addOptions(builder, optionsOffset);
		ConfigSnapshot.addRiskLimits(builder, riskLimitsOffset);
		ConfigSnapshot.addTsNanos(builder, tsNanos);
		return ConfigSnapshot.endConfigSnapshot(builder);
	}

	unpack(): ConfigSnapshotT {
		return new ConfigSnapshotT(
			this.version(),
			this.bb!.createObjList<Instrument, InstrumentT>(
				this.instruments.bind(this),
				this.instrumentsLength(),
			),
			this.bb!.createObjList<EtfComponent, EtfComponentT>(
				this.etf.bind(this),
				this.etfLength(),
			),
			this.bb!.createObjList<OptionMeta, OptionMetaT>(
				this.options.bind(this),
				this.optionsLength(),
			),
			this.bb!.createObjList<RiskLimit, RiskLimitT>(
				this.riskLimits.bind(this),
				this.riskLimitsLength(),
			),
			this.tsNanos(),
		);
	}

	unpackTo(_o: ConfigSnapshotT): void {
		_o.version = this.version();
		_o.instruments = this.bb!.createObjList<Instrument, InstrumentT>(
			this.instruments.bind(this),
			this.instrumentsLength(),
		);
		_o.etf = this.bb!.createObjList<EtfComponent, EtfComponentT>(
			this.etf.bind(this),
			this.etfLength(),
		);
		_o.options = this.bb!.createObjList<OptionMeta, OptionMetaT>(
			this.options.bind(this),
			this.optionsLength(),
		);
		_o.riskLimits = this.bb!.createObjList<RiskLimit, RiskLimitT>(
			this.riskLimits.bind(this),
			this.riskLimitsLength(),
		);
		_o.tsNanos = this.tsNanos();
	}
}

export class ConfigSnapshotT implements flatbuffers.IGeneratedObject {
	constructor(
		public version: bigint = BigInt("0"),
		public instruments: InstrumentT[] = [],
		public etf: EtfComponentT[] = [],
		public options: OptionMetaT[] = [],
		public riskLimits: RiskLimitT[] = [],
		public tsNanos: bigint = BigInt("0"),
	) {}

	pack(builder: flatbuffers.Builder): flatbuffers.Offset {
		const instruments = ConfigSnapshot.createInstrumentsVector(
			builder,
			builder.createObjectOffsetList(this.instruments),
		);
		const etf = ConfigSnapshot.createEtfVector(
			builder,
			builder.createObjectOffsetList(this.etf),
		);
		const options = ConfigSnapshot.createOptionsVector(
			builder,
			builder.createObjectOffsetList(this.options),
		);
		const riskLimits = ConfigSnapshot.createRiskLimitsVector(
			builder,
			builder.createObjectOffsetList(this.riskLimits),
		);

		return ConfigSnapshot.createConfigSnapshot(
			builder,
			this.version,
			instruments,
			etf,
			options,
			riskLimits,
			this.tsNanos,
		);
	}
}
