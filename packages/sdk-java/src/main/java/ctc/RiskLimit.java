// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RiskLimit extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static RiskLimit getRootAsRiskLimit(ByteBuffer _bb) { return getRootAsRiskLimit(_bb, new RiskLimit()); }
  public static RiskLimit getRootAsRiskLimit(ByteBuffer _bb, RiskLimit obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RiskLimit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long teamId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long instrumentId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long posMinLots() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long posMaxLots() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long notionalMaxTicks() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long maxOrdersPerSec() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createRiskLimit(FlatBufferBuilder builder,
      long teamId,
      long instrumentId,
      long posMinLots,
      long posMaxLots,
      long notionalMaxTicks,
      long maxOrdersPerSec) {
    builder.startTable(6);
    RiskLimit.addNotionalMaxTicks(builder, notionalMaxTicks);
    RiskLimit.addPosMaxLots(builder, posMaxLots);
    RiskLimit.addPosMinLots(builder, posMinLots);
    RiskLimit.addMaxOrdersPerSec(builder, maxOrdersPerSec);
    RiskLimit.addInstrumentId(builder, instrumentId);
    RiskLimit.addTeamId(builder, teamId);
    return RiskLimit.endRiskLimit(builder);
  }

  public static void startRiskLimit(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addTeamId(FlatBufferBuilder builder, long teamId) { builder.addInt(0, (int) teamId, (int) 0L); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(1, (int) instrumentId, (int) 0L); }
  public static void addPosMinLots(FlatBufferBuilder builder, long posMinLots) { builder.addLong(2, posMinLots, 0L); }
  public static void addPosMaxLots(FlatBufferBuilder builder, long posMaxLots) { builder.addLong(3, posMaxLots, 0L); }
  public static void addNotionalMaxTicks(FlatBufferBuilder builder, long notionalMaxTicks) { builder.addLong(4, notionalMaxTicks, 0L); }
  public static void addMaxOrdersPerSec(FlatBufferBuilder builder, long maxOrdersPerSec) { builder.addInt(5, (int) maxOrdersPerSec, (int) 0L); }
  public static int endRiskLimit(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RiskLimit get(int j) { return get(new RiskLimit(), j); }
    public RiskLimit get(RiskLimit obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

