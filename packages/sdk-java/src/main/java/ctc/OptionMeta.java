// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OptionMeta extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static OptionMeta getRootAsOptionMeta(ByteBuffer _bb) { return getRootAsOptionMeta(_bb, new OptionMeta()); }
  public static OptionMeta getRootAsOptionMeta(ByteBuffer _bb, OptionMeta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OptionMeta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long instrumentId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long underlyingInstrumentId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int strikeTicks() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int right() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long expiryEpochDays() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long multiplier() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createOptionMeta(FlatBufferBuilder builder,
      long instrumentId,
      long underlyingInstrumentId,
      int strikeTicks,
      int right,
      long expiryEpochDays,
      long multiplier) {
    builder.startTable(6);
    OptionMeta.addMultiplier(builder, multiplier);
    OptionMeta.addExpiryEpochDays(builder, expiryEpochDays);
    OptionMeta.addStrikeTicks(builder, strikeTicks);
    OptionMeta.addUnderlyingInstrumentId(builder, underlyingInstrumentId);
    OptionMeta.addInstrumentId(builder, instrumentId);
    OptionMeta.addRight(builder, right);
    return OptionMeta.endOptionMeta(builder);
  }

  public static void startOptionMeta(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(0, (int) instrumentId, (int) 0L); }
  public static void addUnderlyingInstrumentId(FlatBufferBuilder builder, long underlyingInstrumentId) { builder.addInt(1, (int) underlyingInstrumentId, (int) 0L); }
  public static void addStrikeTicks(FlatBufferBuilder builder, int strikeTicks) { builder.addInt(2, strikeTicks, 0); }
  public static void addRight(FlatBufferBuilder builder, int right) { builder.addByte(3, (byte) right, (byte) 0); }
  public static void addExpiryEpochDays(FlatBufferBuilder builder, long expiryEpochDays) { builder.addInt(4, (int) expiryEpochDays, (int) 0L); }
  public static void addMultiplier(FlatBufferBuilder builder, long multiplier) { builder.addInt(5, (int) multiplier, (int) 0L); }
  public static int endOptionMeta(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OptionMeta get(int j) { return get(new OptionMeta(), j); }
    public OptionMeta get(OptionMeta obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

