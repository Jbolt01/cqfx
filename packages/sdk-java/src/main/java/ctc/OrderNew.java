// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OrderNew extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static OrderNew getRootAsOrderNew(ByteBuffer _bb) { return getRootAsOrderNew(_bb, new OrderNew()); }
  public static OrderNew getRootAsOrderNew(ByteBuffer _bb, OrderNew obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrderNew __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long clOrdId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long instrumentId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int side() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int type() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int tif() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int pxTicks() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long lots() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long minFillLots() { int o = __offset(18); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean postOnly() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int stp() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long userId() { int o = __offset(24); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long teamId() { int o = __offset(26); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createOrderNew(FlatBufferBuilder builder,
      long clOrdId,
      long instrumentId,
      int side,
      int type,
      int tif,
      int pxTicks,
      long lots,
      long minFillLots,
      boolean postOnly,
      int stp,
      long userId,
      long teamId) {
    builder.startTable(12);
    OrderNew.addMinFillLots(builder, minFillLots);
    OrderNew.addLots(builder, lots);
    OrderNew.addClOrdId(builder, clOrdId);
    OrderNew.addTeamId(builder, teamId);
    OrderNew.addUserId(builder, userId);
    OrderNew.addPxTicks(builder, pxTicks);
    OrderNew.addInstrumentId(builder, instrumentId);
    OrderNew.addStp(builder, stp);
    OrderNew.addPostOnly(builder, postOnly);
    OrderNew.addTif(builder, tif);
    OrderNew.addType(builder, type);
    OrderNew.addSide(builder, side);
    return OrderNew.endOrderNew(builder);
  }

  public static void startOrderNew(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addClOrdId(FlatBufferBuilder builder, long clOrdId) { builder.addLong(0, clOrdId, 0L); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(1, (int) instrumentId, (int) 0L); }
  public static void addSide(FlatBufferBuilder builder, int side) { builder.addByte(2, (byte) side, (byte) 0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(3, (byte) type, (byte) 0); }
  public static void addTif(FlatBufferBuilder builder, int tif) { builder.addByte(4, (byte) tif, (byte) 0); }
  public static void addPxTicks(FlatBufferBuilder builder, int pxTicks) { builder.addInt(5, pxTicks, 0); }
  public static void addLots(FlatBufferBuilder builder, long lots) { builder.addLong(6, lots, 0L); }
  public static void addMinFillLots(FlatBufferBuilder builder, long minFillLots) { builder.addLong(7, minFillLots, 0L); }
  public static void addPostOnly(FlatBufferBuilder builder, boolean postOnly) { builder.addBoolean(8, postOnly, false); }
  public static void addStp(FlatBufferBuilder builder, int stp) { builder.addByte(9, (byte) stp, (byte) 0); }
  public static void addUserId(FlatBufferBuilder builder, long userId) { builder.addInt(10, (int) userId, (int) 0L); }
  public static void addTeamId(FlatBufferBuilder builder, long teamId) { builder.addInt(11, (int) teamId, (int) 0L); }
  public static int endOrderNew(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrderNew get(int j) { return get(new OrderNew(), j); }
    public OrderNew get(OrderNew obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

