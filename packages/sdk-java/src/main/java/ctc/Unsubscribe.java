// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Unsubscribe extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Unsubscribe getRootAsUnsubscribe(ByteBuffer _bb) { return getRootAsUnsubscribe(_bb, new Unsubscribe()); }
  public static Unsubscribe getRootAsUnsubscribe(ByteBuffer _bb, Unsubscribe obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Unsubscribe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long instruments(int j) { int o = __offset(4); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int instrumentsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector instrumentsVector() { return instrumentsVector(new IntVector()); }
  public IntVector instrumentsVector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer instrumentsAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer instrumentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public long teamId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createUnsubscribe(FlatBufferBuilder builder,
      int instrumentsOffset,
      long teamId) {
    builder.startTable(2);
    Unsubscribe.addTeamId(builder, teamId);
    Unsubscribe.addInstruments(builder, instrumentsOffset);
    return Unsubscribe.endUnsubscribe(builder);
  }

  public static void startUnsubscribe(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addInstruments(FlatBufferBuilder builder, int instrumentsOffset) { builder.addOffset(0, instrumentsOffset, 0); }
  public static int createInstrumentsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startInstrumentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTeamId(FlatBufferBuilder builder, long teamId) { builder.addInt(1, (int) teamId, (int) 0L); }
  public static int endUnsubscribe(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Unsubscribe get(int j) { return get(new Unsubscribe(), j); }
    public Unsubscribe get(Unsubscribe obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

