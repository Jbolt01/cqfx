// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Instrument extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Instrument getRootAsInstrument(ByteBuffer _bb) { return getRootAsInstrument(_bb, new Instrument()); }
  public static Instrument getRootAsInstrument(ByteBuffer _bb, Instrument obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Instrument __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String symbol() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer symbolAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer symbolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int type() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public String currency() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer currencyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer currencyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public long tickSizeNanos() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long tickSizeTicks() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long lotSizeLots() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long meta() { int o = __offset(18); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createInstrument(FlatBufferBuilder builder,
      long id,
      int symbolOffset,
      int type,
      int currencyOffset,
      long tickSizeNanos,
      long tickSizeTicks,
      long lotSizeLots,
      long meta) {
    builder.startTable(8);
    Instrument.addMeta(builder, meta);
    Instrument.addLotSizeLots(builder, lotSizeLots);
    Instrument.addTickSizeTicks(builder, tickSizeTicks);
    Instrument.addTickSizeNanos(builder, tickSizeNanos);
    Instrument.addCurrency(builder, currencyOffset);
    Instrument.addSymbol(builder, symbolOffset);
    Instrument.addId(builder, id);
    Instrument.addType(builder, type);
    return Instrument.endInstrument(builder);
  }

  public static void startInstrument(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addInt(0, (int) id, (int) 0L); }
  public static void addSymbol(FlatBufferBuilder builder, int symbolOffset) { builder.addOffset(1, symbolOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(2, (byte) type, (byte) 0); }
  public static void addCurrency(FlatBufferBuilder builder, int currencyOffset) { builder.addOffset(3, currencyOffset, 0); }
  public static void addTickSizeNanos(FlatBufferBuilder builder, long tickSizeNanos) { builder.addInt(4, (int) tickSizeNanos, (int) 0L); }
  public static void addTickSizeTicks(FlatBufferBuilder builder, long tickSizeTicks) { builder.addInt(5, (int) tickSizeTicks, (int) 0L); }
  public static void addLotSizeLots(FlatBufferBuilder builder, long lotSizeLots) { builder.addInt(6, (int) lotSizeLots, (int) 0L); }
  public static void addMeta(FlatBufferBuilder builder, long meta) { builder.addLong(7, meta, 0L); }
  public static int endInstrument(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Instrument get(int j) { return get(new Instrument(), j); }
    public Instrument get(Instrument obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

