// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BookDelta extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static BookDelta getRootAsBookDelta(ByteBuffer _bb) { return getRootAsBookDelta(_bb, new BookDelta()); }
  public static BookDelta getRootAsBookDelta(ByteBuffer _bb, BookDelta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BookDelta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long instrumentId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long feedSeq() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int kind() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public ctc.PriceLevelDelta levels(int j) { return levels(new ctc.PriceLevelDelta(), j); }
  public ctc.PriceLevelDelta levels(ctc.PriceLevelDelta obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int levelsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ctc.PriceLevelDelta.Vector levelsVector() { return levelsVector(new ctc.PriceLevelDelta.Vector()); }
  public ctc.PriceLevelDelta.Vector levelsVector(ctc.PriceLevelDelta.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long tsNanos() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int bestBidTicks() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int bestAskTicks() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBookDelta(FlatBufferBuilder builder,
      long instrumentId,
      long feedSeq,
      int kind,
      int levelsOffset,
      long tsNanos,
      int bestBidTicks,
      int bestAskTicks) {
    builder.startTable(7);
    BookDelta.addTsNanos(builder, tsNanos);
    BookDelta.addFeedSeq(builder, feedSeq);
    BookDelta.addBestAskTicks(builder, bestAskTicks);
    BookDelta.addBestBidTicks(builder, bestBidTicks);
    BookDelta.addLevels(builder, levelsOffset);
    BookDelta.addInstrumentId(builder, instrumentId);
    BookDelta.addKind(builder, kind);
    return BookDelta.endBookDelta(builder);
  }

  public static void startBookDelta(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(0, (int) instrumentId, (int) 0L); }
  public static void addFeedSeq(FlatBufferBuilder builder, long feedSeq) { builder.addLong(1, feedSeq, 0L); }
  public static void addKind(FlatBufferBuilder builder, int kind) { builder.addByte(2, (byte) kind, (byte) 0); }
  public static void addLevels(FlatBufferBuilder builder, int levelsOffset) { builder.addOffset(3, levelsOffset, 0); }
  public static int createLevelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLevelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTsNanos(FlatBufferBuilder builder, long tsNanos) { builder.addLong(4, tsNanos, 0L); }
  public static void addBestBidTicks(FlatBufferBuilder builder, int bestBidTicks) { builder.addInt(5, bestBidTicks, 0); }
  public static void addBestAskTicks(FlatBufferBuilder builder, int bestAskTicks) { builder.addInt(6, bestAskTicks, 0); }
  public static int endBookDelta(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BookDelta get(int j) { return get(new BookDelta(), j); }
    public BookDelta get(BookDelta obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

