// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Ack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Ack getRootAsAck(ByteBuffer _bb) { return getRootAsAck(_bb, new Ack()); }
  public static Ack getRootAsAck(ByteBuffer _bb, Ack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Ack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int execType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long clOrdId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long orderId() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long instrumentId() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long filledLots() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long leavesLots() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int avgPxTicks() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int rejectCode() { int o = __offset(18); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public String text() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer textInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public long tsNanos() { int o = __offset(22); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createAck(FlatBufferBuilder builder,
      int execType,
      long clOrdId,
      long orderId,
      long instrumentId,
      long filledLots,
      long leavesLots,
      int avgPxTicks,
      int rejectCode,
      int textOffset,
      long tsNanos) {
    builder.startTable(10);
    Ack.addTsNanos(builder, tsNanos);
    Ack.addLeavesLots(builder, leavesLots);
    Ack.addFilledLots(builder, filledLots);
    Ack.addOrderId(builder, orderId);
    Ack.addClOrdId(builder, clOrdId);
    Ack.addText(builder, textOffset);
    Ack.addAvgPxTicks(builder, avgPxTicks);
    Ack.addInstrumentId(builder, instrumentId);
    Ack.addRejectCode(builder, rejectCode);
    Ack.addExecType(builder, execType);
    return Ack.endAck(builder);
  }

  public static void startAck(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addExecType(FlatBufferBuilder builder, int execType) { builder.addByte(0, (byte) execType, (byte) 0); }
  public static void addClOrdId(FlatBufferBuilder builder, long clOrdId) { builder.addLong(1, clOrdId, 0L); }
  public static void addOrderId(FlatBufferBuilder builder, long orderId) { builder.addLong(2, orderId, 0L); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(3, (int) instrumentId, (int) 0L); }
  public static void addFilledLots(FlatBufferBuilder builder, long filledLots) { builder.addLong(4, filledLots, 0L); }
  public static void addLeavesLots(FlatBufferBuilder builder, long leavesLots) { builder.addLong(5, leavesLots, 0L); }
  public static void addAvgPxTicks(FlatBufferBuilder builder, int avgPxTicks) { builder.addInt(6, avgPxTicks, 0); }
  public static void addRejectCode(FlatBufferBuilder builder, int rejectCode) { builder.addShort(7, (short) rejectCode, (short) 0); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(8, textOffset, 0); }
  public static void addTsNanos(FlatBufferBuilder builder, long tsNanos) { builder.addLong(9, tsNanos, 0L); }
  public static int endAck(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Ack get(int j) { return get(new Ack(), j); }
    public Ack get(Ack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

