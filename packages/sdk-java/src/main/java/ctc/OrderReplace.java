// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OrderReplace extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static OrderReplace getRootAsOrderReplace(ByteBuffer _bb) { return getRootAsOrderReplace(_bb, new OrderReplace()); }
  public static OrderReplace getRootAsOrderReplace(ByteBuffer _bb, OrderReplace obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrderReplace __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long origClOrdId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long newClOrdId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long instrumentId() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int pxTicks() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long lots() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long minFillLots() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean postOnly() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long userId() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long teamId() { int o = __offset(20); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createOrderReplace(FlatBufferBuilder builder,
      long origClOrdId,
      long newClOrdId,
      long instrumentId,
      int pxTicks,
      long lots,
      long minFillLots,
      boolean postOnly,
      long userId,
      long teamId) {
    builder.startTable(9);
    OrderReplace.addMinFillLots(builder, minFillLots);
    OrderReplace.addLots(builder, lots);
    OrderReplace.addNewClOrdId(builder, newClOrdId);
    OrderReplace.addOrigClOrdId(builder, origClOrdId);
    OrderReplace.addTeamId(builder, teamId);
    OrderReplace.addUserId(builder, userId);
    OrderReplace.addPxTicks(builder, pxTicks);
    OrderReplace.addInstrumentId(builder, instrumentId);
    OrderReplace.addPostOnly(builder, postOnly);
    return OrderReplace.endOrderReplace(builder);
  }

  public static void startOrderReplace(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addOrigClOrdId(FlatBufferBuilder builder, long origClOrdId) { builder.addLong(0, origClOrdId, 0L); }
  public static void addNewClOrdId(FlatBufferBuilder builder, long newClOrdId) { builder.addLong(1, newClOrdId, 0L); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(2, (int) instrumentId, (int) 0L); }
  public static void addPxTicks(FlatBufferBuilder builder, int pxTicks) { builder.addInt(3, pxTicks, 0); }
  public static void addLots(FlatBufferBuilder builder, long lots) { builder.addLong(4, lots, 0L); }
  public static void addMinFillLots(FlatBufferBuilder builder, long minFillLots) { builder.addLong(5, minFillLots, 0L); }
  public static void addPostOnly(FlatBufferBuilder builder, boolean postOnly) { builder.addBoolean(6, postOnly, false); }
  public static void addUserId(FlatBufferBuilder builder, long userId) { builder.addInt(7, (int) userId, (int) 0L); }
  public static void addTeamId(FlatBufferBuilder builder, long teamId) { builder.addInt(8, (int) teamId, (int) 0L); }
  public static int endOrderReplace(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrderReplace get(int j) { return get(new OrderReplace(), j); }
    public OrderReplace get(OrderReplace obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

