// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CancelAll extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static CancelAll getRootAsCancelAll(ByteBuffer _bb) { return getRootAsCancelAll(_bb, new CancelAll()); }
  public static CancelAll getRootAsCancelAll(ByteBuffer _bb, CancelAll obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CancelAll __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String scope() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scopeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer scopeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long userId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long teamId() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createCancelAll(FlatBufferBuilder builder,
      int scopeOffset,
      long userId,
      long teamId) {
    builder.startTable(3);
    CancelAll.addTeamId(builder, teamId);
    CancelAll.addUserId(builder, userId);
    CancelAll.addScope(builder, scopeOffset);
    return CancelAll.endCancelAll(builder);
  }

  public static void startCancelAll(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addScope(FlatBufferBuilder builder, int scopeOffset) { builder.addOffset(0, scopeOffset, 0); }
  public static void addUserId(FlatBufferBuilder builder, long userId) { builder.addInt(1, (int) userId, (int) 0L); }
  public static void addTeamId(FlatBufferBuilder builder, long teamId) { builder.addInt(2, (int) teamId, (int) 0L); }
  public static int endCancelAll(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CancelAll get(int j) { return get(new CancelAll(), j); }
    public CancelAll get(CancelAll obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

