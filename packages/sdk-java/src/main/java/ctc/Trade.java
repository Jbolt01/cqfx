// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Trade extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Trade getRootAsTrade(ByteBuffer _bb) { return getRootAsTrade(_bb, new Trade()); }
  public static Trade getRootAsTrade(ByteBuffer _bb, Trade obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Trade __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long instrumentId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long tradeId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int pxTicks() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long lots() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int aggressor() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long tsNanos() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long matchId() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createTrade(FlatBufferBuilder builder,
      long instrumentId,
      long tradeId,
      int pxTicks,
      long lots,
      int aggressor,
      long tsNanos,
      long matchId) {
    builder.startTable(7);
    Trade.addMatchId(builder, matchId);
    Trade.addTsNanos(builder, tsNanos);
    Trade.addLots(builder, lots);
    Trade.addTradeId(builder, tradeId);
    Trade.addPxTicks(builder, pxTicks);
    Trade.addInstrumentId(builder, instrumentId);
    Trade.addAggressor(builder, aggressor);
    return Trade.endTrade(builder);
  }

  public static void startTrade(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(0, (int) instrumentId, (int) 0L); }
  public static void addTradeId(FlatBufferBuilder builder, long tradeId) { builder.addLong(1, tradeId, 0L); }
  public static void addPxTicks(FlatBufferBuilder builder, int pxTicks) { builder.addInt(2, pxTicks, 0); }
  public static void addLots(FlatBufferBuilder builder, long lots) { builder.addLong(3, lots, 0L); }
  public static void addAggressor(FlatBufferBuilder builder, int aggressor) { builder.addByte(4, (byte) aggressor, (byte) 0); }
  public static void addTsNanos(FlatBufferBuilder builder, long tsNanos) { builder.addLong(5, tsNanos, 0L); }
  public static void addMatchId(FlatBufferBuilder builder, long matchId) { builder.addLong(6, matchId, 0L); }
  public static int endTrade(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Trade get(int j) { return get(new Trade(), j); }
    public Trade get(Trade obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

