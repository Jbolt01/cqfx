// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ConfigSnapshot extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ConfigSnapshot getRootAsConfigSnapshot(ByteBuffer _bb) { return getRootAsConfigSnapshot(_bb, new ConfigSnapshot()); }
  public static ConfigSnapshot getRootAsConfigSnapshot(ByteBuffer _bb, ConfigSnapshot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ConfigSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long version() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public ctc.Instrument instruments(int j) { return instruments(new ctc.Instrument(), j); }
  public ctc.Instrument instruments(ctc.Instrument obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int instrumentsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ctc.Instrument.Vector instrumentsVector() { return instrumentsVector(new ctc.Instrument.Vector()); }
  public ctc.Instrument.Vector instrumentsVector(ctc.Instrument.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ctc.EtfComponent etf(int j) { return etf(new ctc.EtfComponent(), j); }
  public ctc.EtfComponent etf(ctc.EtfComponent obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int etfLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ctc.EtfComponent.Vector etfVector() { return etfVector(new ctc.EtfComponent.Vector()); }
  public ctc.EtfComponent.Vector etfVector(ctc.EtfComponent.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ctc.OptionMeta options(int j) { return options(new ctc.OptionMeta(), j); }
  public ctc.OptionMeta options(ctc.OptionMeta obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int optionsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ctc.OptionMeta.Vector optionsVector() { return optionsVector(new ctc.OptionMeta.Vector()); }
  public ctc.OptionMeta.Vector optionsVector(ctc.OptionMeta.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ctc.RiskLimit riskLimits(int j) { return riskLimits(new ctc.RiskLimit(), j); }
  public ctc.RiskLimit riskLimits(ctc.RiskLimit obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int riskLimitsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ctc.RiskLimit.Vector riskLimitsVector() { return riskLimitsVector(new ctc.RiskLimit.Vector()); }
  public ctc.RiskLimit.Vector riskLimitsVector(ctc.RiskLimit.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long tsNanos() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createConfigSnapshot(FlatBufferBuilder builder,
      long version,
      int instrumentsOffset,
      int etfOffset,
      int optionsOffset,
      int riskLimitsOffset,
      long tsNanos) {
    builder.startTable(6);
    ConfigSnapshot.addTsNanos(builder, tsNanos);
    ConfigSnapshot.addVersion(builder, version);
    ConfigSnapshot.addRiskLimits(builder, riskLimitsOffset);
    ConfigSnapshot.addOptions(builder, optionsOffset);
    ConfigSnapshot.addEtf(builder, etfOffset);
    ConfigSnapshot.addInstruments(builder, instrumentsOffset);
    return ConfigSnapshot.endConfigSnapshot(builder);
  }

  public static void startConfigSnapshot(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addVersion(FlatBufferBuilder builder, long version) { builder.addLong(0, version, 0L); }
  public static void addInstruments(FlatBufferBuilder builder, int instrumentsOffset) { builder.addOffset(1, instrumentsOffset, 0); }
  public static int createInstrumentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInstrumentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEtf(FlatBufferBuilder builder, int etfOffset) { builder.addOffset(2, etfOffset, 0); }
  public static int createEtfVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEtfVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOptions(FlatBufferBuilder builder, int optionsOffset) { builder.addOffset(3, optionsOffset, 0); }
  public static int createOptionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOptionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRiskLimits(FlatBufferBuilder builder, int riskLimitsOffset) { builder.addOffset(4, riskLimitsOffset, 0); }
  public static int createRiskLimitsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRiskLimitsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTsNanos(FlatBufferBuilder builder, long tsNanos) { builder.addLong(5, tsNanos, 0L); }
  public static int endConfigSnapshot(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ConfigSnapshot get(int j) { return get(new ConfigSnapshot(), j); }
    public ConfigSnapshot get(ConfigSnapshot obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

