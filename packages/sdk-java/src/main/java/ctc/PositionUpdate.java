// automatically generated by the FlatBuffers compiler, do not modify

package ctc;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PositionUpdate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static PositionUpdate getRootAsPositionUpdate(ByteBuffer _bb) { return getRootAsPositionUpdate(_bb, new PositionUpdate()); }
  public static PositionUpdate getRootAsPositionUpdate(ByteBuffer _bb, PositionUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PositionUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long teamId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long instrumentId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long posLots() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long openBuyLots() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long openSellLots() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long realizedPnlTicks() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long unrealizedPnlTicks() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long headroomLongLots() { int o = __offset(18); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long headroomShortLots() { int o = __offset(20); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long tsNanos() { int o = __offset(22); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createPositionUpdate(FlatBufferBuilder builder,
      long teamId,
      long instrumentId,
      long posLots,
      long openBuyLots,
      long openSellLots,
      long realizedPnlTicks,
      long unrealizedPnlTicks,
      long headroomLongLots,
      long headroomShortLots,
      long tsNanos) {
    builder.startTable(10);
    PositionUpdate.addTsNanos(builder, tsNanos);
    PositionUpdate.addHeadroomShortLots(builder, headroomShortLots);
    PositionUpdate.addHeadroomLongLots(builder, headroomLongLots);
    PositionUpdate.addUnrealizedPnlTicks(builder, unrealizedPnlTicks);
    PositionUpdate.addRealizedPnlTicks(builder, realizedPnlTicks);
    PositionUpdate.addOpenSellLots(builder, openSellLots);
    PositionUpdate.addOpenBuyLots(builder, openBuyLots);
    PositionUpdate.addPosLots(builder, posLots);
    PositionUpdate.addInstrumentId(builder, instrumentId);
    PositionUpdate.addTeamId(builder, teamId);
    return PositionUpdate.endPositionUpdate(builder);
  }

  public static void startPositionUpdate(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addTeamId(FlatBufferBuilder builder, long teamId) { builder.addInt(0, (int) teamId, (int) 0L); }
  public static void addInstrumentId(FlatBufferBuilder builder, long instrumentId) { builder.addInt(1, (int) instrumentId, (int) 0L); }
  public static void addPosLots(FlatBufferBuilder builder, long posLots) { builder.addLong(2, posLots, 0L); }
  public static void addOpenBuyLots(FlatBufferBuilder builder, long openBuyLots) { builder.addLong(3, openBuyLots, 0L); }
  public static void addOpenSellLots(FlatBufferBuilder builder, long openSellLots) { builder.addLong(4, openSellLots, 0L); }
  public static void addRealizedPnlTicks(FlatBufferBuilder builder, long realizedPnlTicks) { builder.addLong(5, realizedPnlTicks, 0L); }
  public static void addUnrealizedPnlTicks(FlatBufferBuilder builder, long unrealizedPnlTicks) { builder.addLong(6, unrealizedPnlTicks, 0L); }
  public static void addHeadroomLongLots(FlatBufferBuilder builder, long headroomLongLots) { builder.addLong(7, headroomLongLots, 0L); }
  public static void addHeadroomShortLots(FlatBufferBuilder builder, long headroomShortLots) { builder.addLong(8, headroomShortLots, 0L); }
  public static void addTsNanos(FlatBufferBuilder builder, long tsNanos) { builder.addLong(9, tsNanos, 0L); }
  public static int endPositionUpdate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PositionUpdate get(int j) { return get(new PositionUpdate(), j); }
    public PositionUpdate get(PositionUpdate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

