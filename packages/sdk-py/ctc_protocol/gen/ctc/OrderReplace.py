# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OrderReplace(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrderReplace()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrderReplace(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrderReplaceBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # OrderReplace
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OrderReplace
    def OrigClOrdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def NewClOrdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def PxTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def Lots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def MinFillLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def PostOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OrderReplace
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OrderReplace
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def OrderReplaceStart(builder):
    builder.StartObject(9)

def Start(builder):
    OrderReplaceStart(builder)

def OrderReplaceAddOrigClOrdId(builder, origClOrdId):
    builder.PrependUint64Slot(0, origClOrdId, 0)

def AddOrigClOrdId(builder, origClOrdId):
    OrderReplaceAddOrigClOrdId(builder, origClOrdId)

def OrderReplaceAddNewClOrdId(builder, newClOrdId):
    builder.PrependUint64Slot(1, newClOrdId, 0)

def AddNewClOrdId(builder, newClOrdId):
    OrderReplaceAddNewClOrdId(builder, newClOrdId)

def OrderReplaceAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(2, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    OrderReplaceAddInstrumentId(builder, instrumentId)

def OrderReplaceAddPxTicks(builder, pxTicks):
    builder.PrependInt32Slot(3, pxTicks, 0)

def AddPxTicks(builder, pxTicks):
    OrderReplaceAddPxTicks(builder, pxTicks)

def OrderReplaceAddLots(builder, lots):
    builder.PrependInt64Slot(4, lots, 0)

def AddLots(builder, lots):
    OrderReplaceAddLots(builder, lots)

def OrderReplaceAddMinFillLots(builder, minFillLots):
    builder.PrependInt64Slot(5, minFillLots, 0)

def AddMinFillLots(builder, minFillLots):
    OrderReplaceAddMinFillLots(builder, minFillLots)

def OrderReplaceAddPostOnly(builder, postOnly):
    builder.PrependBoolSlot(6, postOnly, 0)

def AddPostOnly(builder, postOnly):
    OrderReplaceAddPostOnly(builder, postOnly)

def OrderReplaceAddUserId(builder, userId):
    builder.PrependUint32Slot(7, userId, 0)

def AddUserId(builder, userId):
    OrderReplaceAddUserId(builder, userId)

def OrderReplaceAddTeamId(builder, teamId):
    builder.PrependUint32Slot(8, teamId, 0)

def AddTeamId(builder, teamId):
    OrderReplaceAddTeamId(builder, teamId)

def OrderReplaceEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrderReplaceEnd(builder)
