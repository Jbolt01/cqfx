# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Instrument(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Instrument()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstrument(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def InstrumentBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # Instrument
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Instrument
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Instrument
    def Symbol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Instrument
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Instrument
    def Currency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Instrument
    def TickSizeNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Instrument
    def TickSizeTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Instrument
    def LotSizeLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Instrument
    def Meta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def InstrumentStart(builder):
    builder.StartObject(8)

def Start(builder):
    InstrumentStart(builder)

def InstrumentAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    InstrumentAddId(builder, id)

def InstrumentAddSymbol(builder, symbol):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(symbol), 0)

def AddSymbol(builder, symbol):
    InstrumentAddSymbol(builder, symbol)

def InstrumentAddType(builder, type):
    builder.PrependUint8Slot(2, type, 0)

def AddType(builder, type):
    InstrumentAddType(builder, type)

def InstrumentAddCurrency(builder, currency):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(currency), 0)

def AddCurrency(builder, currency):
    InstrumentAddCurrency(builder, currency)

def InstrumentAddTickSizeNanos(builder, tickSizeNanos):
    builder.PrependUint32Slot(4, tickSizeNanos, 0)

def AddTickSizeNanos(builder, tickSizeNanos):
    InstrumentAddTickSizeNanos(builder, tickSizeNanos)

def InstrumentAddTickSizeTicks(builder, tickSizeTicks):
    builder.PrependUint32Slot(5, tickSizeTicks, 0)

def AddTickSizeTicks(builder, tickSizeTicks):
    InstrumentAddTickSizeTicks(builder, tickSizeTicks)

def InstrumentAddLotSizeLots(builder, lotSizeLots):
    builder.PrependUint32Slot(6, lotSizeLots, 0)

def AddLotSizeLots(builder, lotSizeLots):
    InstrumentAddLotSizeLots(builder, lotSizeLots)

def InstrumentAddMeta(builder, meta):
    builder.PrependUint64Slot(7, meta, 0)

def AddMeta(builder, meta):
    InstrumentAddMeta(builder, meta)

def InstrumentEnd(builder):
    return builder.EndObject()

def End(builder):
    return InstrumentEnd(builder)
