# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OptionMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OptionMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOptionMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OptionMetaBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # OptionMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OptionMeta
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OptionMeta
    def UnderlyingInstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OptionMeta
    def StrikeTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OptionMeta
    def Right(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # OptionMeta
    def ExpiryEpochDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OptionMeta
    def Multiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def OptionMetaStart(builder):
    builder.StartObject(6)

def Start(builder):
    OptionMetaStart(builder)

def OptionMetaAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(0, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    OptionMetaAddInstrumentId(builder, instrumentId)

def OptionMetaAddUnderlyingInstrumentId(builder, underlyingInstrumentId):
    builder.PrependUint32Slot(1, underlyingInstrumentId, 0)

def AddUnderlyingInstrumentId(builder, underlyingInstrumentId):
    OptionMetaAddUnderlyingInstrumentId(builder, underlyingInstrumentId)

def OptionMetaAddStrikeTicks(builder, strikeTicks):
    builder.PrependInt32Slot(2, strikeTicks, 0)

def AddStrikeTicks(builder, strikeTicks):
    OptionMetaAddStrikeTicks(builder, strikeTicks)

def OptionMetaAddRight(builder, right):
    builder.PrependUint8Slot(3, right, 0)

def AddRight(builder, right):
    OptionMetaAddRight(builder, right)

def OptionMetaAddExpiryEpochDays(builder, expiryEpochDays):
    builder.PrependUint32Slot(4, expiryEpochDays, 0)

def AddExpiryEpochDays(builder, expiryEpochDays):
    OptionMetaAddExpiryEpochDays(builder, expiryEpochDays)

def OptionMetaAddMultiplier(builder, multiplier):
    builder.PrependUint32Slot(5, multiplier, 0)

def AddMultiplier(builder, multiplier):
    OptionMetaAddMultiplier(builder, multiplier)

def OptionMetaEnd(builder):
    return builder.EndObject()

def End(builder):
    return OptionMetaEnd(builder)
