# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Trade(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Trade()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrade(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TradeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # Trade
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Trade
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Trade
    def TradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Trade
    def PxTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Trade
    def Lots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Trade
    def Aggressor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Trade
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Trade
    def MatchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def TradeStart(builder):
    builder.StartObject(7)

def Start(builder):
    TradeStart(builder)

def TradeAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(0, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    TradeAddInstrumentId(builder, instrumentId)

def TradeAddTradeId(builder, tradeId):
    builder.PrependUint64Slot(1, tradeId, 0)

def AddTradeId(builder, tradeId):
    TradeAddTradeId(builder, tradeId)

def TradeAddPxTicks(builder, pxTicks):
    builder.PrependInt32Slot(2, pxTicks, 0)

def AddPxTicks(builder, pxTicks):
    TradeAddPxTicks(builder, pxTicks)

def TradeAddLots(builder, lots):
    builder.PrependInt64Slot(3, lots, 0)

def AddLots(builder, lots):
    TradeAddLots(builder, lots)

def TradeAddAggressor(builder, aggressor):
    builder.PrependUint8Slot(4, aggressor, 0)

def AddAggressor(builder, aggressor):
    TradeAddAggressor(builder, aggressor)

def TradeAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(5, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    TradeAddTsNanos(builder, tsNanos)

def TradeAddMatchId(builder, matchId):
    builder.PrependUint64Slot(6, matchId, 0)

def AddMatchId(builder, matchId):
    TradeAddMatchId(builder, matchId)

def TradeEnd(builder):
    return builder.EndObject()

def End(builder):
    return TradeEnd(builder)
