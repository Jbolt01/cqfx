# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PositionUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PositionUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPositionUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PositionUpdateBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # PositionUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PositionUpdate
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def PosLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def OpenBuyLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def OpenSellLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def RealizedPnlTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def UnrealizedPnlTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def HeadroomLongLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def HeadroomShortLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PositionUpdate
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def PositionUpdateStart(builder):
    builder.StartObject(10)

def Start(builder):
    PositionUpdateStart(builder)

def PositionUpdateAddTeamId(builder, teamId):
    builder.PrependUint32Slot(0, teamId, 0)

def AddTeamId(builder, teamId):
    PositionUpdateAddTeamId(builder, teamId)

def PositionUpdateAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(1, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    PositionUpdateAddInstrumentId(builder, instrumentId)

def PositionUpdateAddPosLots(builder, posLots):
    builder.PrependInt64Slot(2, posLots, 0)

def AddPosLots(builder, posLots):
    PositionUpdateAddPosLots(builder, posLots)

def PositionUpdateAddOpenBuyLots(builder, openBuyLots):
    builder.PrependInt64Slot(3, openBuyLots, 0)

def AddOpenBuyLots(builder, openBuyLots):
    PositionUpdateAddOpenBuyLots(builder, openBuyLots)

def PositionUpdateAddOpenSellLots(builder, openSellLots):
    builder.PrependInt64Slot(4, openSellLots, 0)

def AddOpenSellLots(builder, openSellLots):
    PositionUpdateAddOpenSellLots(builder, openSellLots)

def PositionUpdateAddRealizedPnlTicks(builder, realizedPnlTicks):
    builder.PrependInt64Slot(5, realizedPnlTicks, 0)

def AddRealizedPnlTicks(builder, realizedPnlTicks):
    PositionUpdateAddRealizedPnlTicks(builder, realizedPnlTicks)

def PositionUpdateAddUnrealizedPnlTicks(builder, unrealizedPnlTicks):
    builder.PrependInt64Slot(6, unrealizedPnlTicks, 0)

def AddUnrealizedPnlTicks(builder, unrealizedPnlTicks):
    PositionUpdateAddUnrealizedPnlTicks(builder, unrealizedPnlTicks)

def PositionUpdateAddHeadroomLongLots(builder, headroomLongLots):
    builder.PrependInt64Slot(7, headroomLongLots, 0)

def AddHeadroomLongLots(builder, headroomLongLots):
    PositionUpdateAddHeadroomLongLots(builder, headroomLongLots)

def PositionUpdateAddHeadroomShortLots(builder, headroomShortLots):
    builder.PrependInt64Slot(8, headroomShortLots, 0)

def AddHeadroomShortLots(builder, headroomShortLots):
    PositionUpdateAddHeadroomShortLots(builder, headroomShortLots)

def PositionUpdateAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(9, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    PositionUpdateAddTsNanos(builder, tsNanos)

def PositionUpdateEnd(builder):
    return builder.EndObject()

def End(builder):
    return PositionUpdateEnd(builder)
