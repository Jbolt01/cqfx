# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Subscribe(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Subscribe()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSubscribe(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SubscribeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # Subscribe
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Subscribe
    def Instruments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Subscribe
    def InstrumentsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Subscribe
    def InstrumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Subscribe
    def InstrumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Subscribe
    def BookDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Subscribe
    def Trades(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Subscribe
    def Positions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Subscribe
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SubscribeStart(builder):
    builder.StartObject(5)

def Start(builder):
    SubscribeStart(builder)

def SubscribeAddInstruments(builder, instruments):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instruments), 0)

def AddInstruments(builder, instruments):
    SubscribeAddInstruments(builder, instruments)

def SubscribeStartInstrumentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInstrumentsVector(builder, numElems):
    return SubscribeStartInstrumentsVector(builder, numElems)

def SubscribeAddBookDepth(builder, bookDepth):
    builder.PrependUint16Slot(1, bookDepth, 0)

def AddBookDepth(builder, bookDepth):
    SubscribeAddBookDepth(builder, bookDepth)

def SubscribeAddTrades(builder, trades):
    builder.PrependBoolSlot(2, trades, 0)

def AddTrades(builder, trades):
    SubscribeAddTrades(builder, trades)

def SubscribeAddPositions(builder, positions):
    builder.PrependBoolSlot(3, positions, 0)

def AddPositions(builder, positions):
    SubscribeAddPositions(builder, positions)

def SubscribeAddTeamId(builder, teamId):
    builder.PrependUint32Slot(4, teamId, 0)

def AddTeamId(builder, teamId):
    SubscribeAddTeamId(builder, teamId)

def SubscribeEnd(builder):
    return builder.EndObject()

def End(builder):
    return SubscribeEnd(builder)
