# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Unsubscribe(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Unsubscribe()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnsubscribe(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def UnsubscribeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # Unsubscribe
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unsubscribe
    def Instruments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Unsubscribe
    def InstrumentsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Unsubscribe
    def InstrumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Unsubscribe
    def InstrumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Unsubscribe
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def UnsubscribeStart(builder):
    builder.StartObject(2)

def Start(builder):
    UnsubscribeStart(builder)

def UnsubscribeAddInstruments(builder, instruments):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instruments), 0)

def AddInstruments(builder, instruments):
    UnsubscribeAddInstruments(builder, instruments)

def UnsubscribeStartInstrumentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInstrumentsVector(builder, numElems):
    return UnsubscribeStartInstrumentsVector(builder, numElems)

def UnsubscribeAddTeamId(builder, teamId):
    builder.PrependUint32Slot(1, teamId, 0)

def AddTeamId(builder, teamId):
    UnsubscribeAddTeamId(builder, teamId)

def UnsubscribeEnd(builder):
    return builder.EndObject()

def End(builder):
    return UnsubscribeEnd(builder)
