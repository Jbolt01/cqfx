# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SessionEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SessionEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSessionEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SessionEventBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # SessionEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SessionEvent
    def SessionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SessionEvent
    def RoundNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SessionEvent
    def DayNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SessionEvent
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SessionEvent
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def SessionEventStart(builder):
    builder.StartObject(5)

def Start(builder):
    SessionEventStart(builder)

def SessionEventAddSessionId(builder, sessionId):
    builder.PrependUint32Slot(0, sessionId, 0)

def AddSessionId(builder, sessionId):
    SessionEventAddSessionId(builder, sessionId)

def SessionEventAddRoundNo(builder, roundNo):
    builder.PrependUint16Slot(1, roundNo, 0)

def AddRoundNo(builder, roundNo):
    SessionEventAddRoundNo(builder, roundNo)

def SessionEventAddDayNo(builder, dayNo):
    builder.PrependUint16Slot(2, dayNo, 0)

def AddDayNo(builder, dayNo):
    SessionEventAddDayNo(builder, dayNo)

def SessionEventAddState(builder, state):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)

def AddState(builder, state):
    SessionEventAddState(builder, state)

def SessionEventAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(4, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    SessionEventAddTsNanos(builder, tsNanos)

def SessionEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return SessionEventEnd(builder)
