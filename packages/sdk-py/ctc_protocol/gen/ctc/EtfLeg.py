# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EtfLeg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EtfLeg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEtfLeg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EtfLegBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # EtfLeg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EtfLeg
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EtfLeg
    def Lots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EtfLegStart(builder):
    builder.StartObject(2)

def Start(builder):
    EtfLegStart(builder)

def EtfLegAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(0, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    EtfLegAddInstrumentId(builder, instrumentId)

def EtfLegAddLots(builder, lots):
    builder.PrependInt64Slot(1, lots, 0)

def AddLots(builder, lots):
    EtfLegAddLots(builder, lots)

def EtfLegEnd(builder):
    return builder.EndObject()

def End(builder):
    return EtfLegEnd(builder)
