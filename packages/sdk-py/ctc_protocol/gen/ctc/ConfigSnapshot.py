# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConfigSnapshot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConfigSnapshot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConfigSnapshot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ConfigSnapshotBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # ConfigSnapshot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConfigSnapshot
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ConfigSnapshot
    def Instruments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ctc.Instrument import Instrument
            obj = Instrument()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConfigSnapshot
    def InstrumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConfigSnapshot
    def InstrumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ConfigSnapshot
    def Etf(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ctc.EtfComponent import EtfComponent
            obj = EtfComponent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConfigSnapshot
    def EtfLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConfigSnapshot
    def EtfIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ConfigSnapshot
    def Options(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ctc.OptionMeta import OptionMeta
            obj = OptionMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConfigSnapshot
    def OptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConfigSnapshot
    def OptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ConfigSnapshot
    def RiskLimits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ctc.RiskLimit import RiskLimit
            obj = RiskLimit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConfigSnapshot
    def RiskLimitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConfigSnapshot
    def RiskLimitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ConfigSnapshot
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ConfigSnapshotStart(builder):
    builder.StartObject(6)

def Start(builder):
    ConfigSnapshotStart(builder)

def ConfigSnapshotAddVersion(builder, version):
    builder.PrependUint64Slot(0, version, 0)

def AddVersion(builder, version):
    ConfigSnapshotAddVersion(builder, version)

def ConfigSnapshotAddInstruments(builder, instruments):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(instruments), 0)

def AddInstruments(builder, instruments):
    ConfigSnapshotAddInstruments(builder, instruments)

def ConfigSnapshotStartInstrumentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInstrumentsVector(builder, numElems):
    return ConfigSnapshotStartInstrumentsVector(builder, numElems)

def ConfigSnapshotAddEtf(builder, etf):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(etf), 0)

def AddEtf(builder, etf):
    ConfigSnapshotAddEtf(builder, etf)

def ConfigSnapshotStartEtfVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEtfVector(builder, numElems):
    return ConfigSnapshotStartEtfVector(builder, numElems)

def ConfigSnapshotAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def AddOptions(builder, options):
    ConfigSnapshotAddOptions(builder, options)

def ConfigSnapshotStartOptionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOptionsVector(builder, numElems):
    return ConfigSnapshotStartOptionsVector(builder, numElems)

def ConfigSnapshotAddRiskLimits(builder, riskLimits):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(riskLimits), 0)

def AddRiskLimits(builder, riskLimits):
    ConfigSnapshotAddRiskLimits(builder, riskLimits)

def ConfigSnapshotStartRiskLimitsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRiskLimitsVector(builder, numElems):
    return ConfigSnapshotStartRiskLimitsVector(builder, numElems)

def ConfigSnapshotAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(5, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    ConfigSnapshotAddTsNanos(builder, tsNanos)

def ConfigSnapshotEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConfigSnapshotEnd(builder)
