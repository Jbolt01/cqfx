# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RiskLimit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RiskLimit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRiskLimit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RiskLimitBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # RiskLimit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RiskLimit
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RiskLimit
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RiskLimit
    def PosMinLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RiskLimit
    def PosMaxLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RiskLimit
    def NotionalMaxTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RiskLimit
    def MaxOrdersPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def RiskLimitStart(builder):
    builder.StartObject(6)

def Start(builder):
    RiskLimitStart(builder)

def RiskLimitAddTeamId(builder, teamId):
    builder.PrependUint32Slot(0, teamId, 0)

def AddTeamId(builder, teamId):
    RiskLimitAddTeamId(builder, teamId)

def RiskLimitAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(1, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    RiskLimitAddInstrumentId(builder, instrumentId)

def RiskLimitAddPosMinLots(builder, posMinLots):
    builder.PrependInt64Slot(2, posMinLots, 0)

def AddPosMinLots(builder, posMinLots):
    RiskLimitAddPosMinLots(builder, posMinLots)

def RiskLimitAddPosMaxLots(builder, posMaxLots):
    builder.PrependInt64Slot(3, posMaxLots, 0)

def AddPosMaxLots(builder, posMaxLots):
    RiskLimitAddPosMaxLots(builder, posMaxLots)

def RiskLimitAddNotionalMaxTicks(builder, notionalMaxTicks):
    builder.PrependInt64Slot(4, notionalMaxTicks, 0)

def AddNotionalMaxTicks(builder, notionalMaxTicks):
    RiskLimitAddNotionalMaxTicks(builder, notionalMaxTicks)

def RiskLimitAddMaxOrdersPerSec(builder, maxOrdersPerSec):
    builder.PrependUint32Slot(5, maxOrdersPerSec, 0)

def AddMaxOrdersPerSec(builder, maxOrdersPerSec):
    RiskLimitAddMaxOrdersPerSec(builder, maxOrdersPerSec)

def RiskLimitEnd(builder):
    return builder.EndObject()

def End(builder):
    return RiskLimitEnd(builder)
