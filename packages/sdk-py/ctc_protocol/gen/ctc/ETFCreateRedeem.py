# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ETFCreateRedeem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ETFCreateRedeem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsETFCreateRedeem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ETFCreateRedeemBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # ETFCreateRedeem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ETFCreateRedeem
    def RequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeem
    def EtfInstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeem
    def Lots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeem
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeem
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ETFCreateRedeemStart(builder):
    builder.StartObject(5)

def Start(builder):
    ETFCreateRedeemStart(builder)

def ETFCreateRedeemAddRequestId(builder, requestId):
    builder.PrependUint64Slot(0, requestId, 0)

def AddRequestId(builder, requestId):
    ETFCreateRedeemAddRequestId(builder, requestId)

def ETFCreateRedeemAddEtfInstrumentId(builder, etfInstrumentId):
    builder.PrependUint32Slot(1, etfInstrumentId, 0)

def AddEtfInstrumentId(builder, etfInstrumentId):
    ETFCreateRedeemAddEtfInstrumentId(builder, etfInstrumentId)

def ETFCreateRedeemAddLots(builder, lots):
    builder.PrependInt64Slot(2, lots, 0)

def AddLots(builder, lots):
    ETFCreateRedeemAddLots(builder, lots)

def ETFCreateRedeemAddUserId(builder, userId):
    builder.PrependUint32Slot(3, userId, 0)

def AddUserId(builder, userId):
    ETFCreateRedeemAddUserId(builder, userId)

def ETFCreateRedeemAddTeamId(builder, teamId):
    builder.PrependUint32Slot(4, teamId, 0)

def AddTeamId(builder, teamId):
    ETFCreateRedeemAddTeamId(builder, teamId)

def ETFCreateRedeemEnd(builder):
    return builder.EndObject()

def End(builder):
    return ETFCreateRedeemEnd(builder)
