# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ETFCreateRedeemResult(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ETFCreateRedeemResult()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsETFCreateRedeemResult(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ETFCreateRedeemResultBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # ETFCreateRedeemResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ETFCreateRedeemResult
    def RequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeemResult
    def EtfInstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeemResult
    def Lots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeemResult
    def Legs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ctc.EtfLeg import EtfLeg
            obj = EtfLeg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ETFCreateRedeemResult
    def LegsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ETFCreateRedeemResult
    def LegsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ETFCreateRedeemResult
    def Success(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ETFCreateRedeemResult
    def RejectCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ETFCreateRedeemResult
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ETFCreateRedeemResult
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ETFCreateRedeemResultStart(builder):
    builder.StartObject(8)

def Start(builder):
    ETFCreateRedeemResultStart(builder)

def ETFCreateRedeemResultAddRequestId(builder, requestId):
    builder.PrependUint64Slot(0, requestId, 0)

def AddRequestId(builder, requestId):
    ETFCreateRedeemResultAddRequestId(builder, requestId)

def ETFCreateRedeemResultAddEtfInstrumentId(builder, etfInstrumentId):
    builder.PrependUint32Slot(1, etfInstrumentId, 0)

def AddEtfInstrumentId(builder, etfInstrumentId):
    ETFCreateRedeemResultAddEtfInstrumentId(builder, etfInstrumentId)

def ETFCreateRedeemResultAddLots(builder, lots):
    builder.PrependInt64Slot(2, lots, 0)

def AddLots(builder, lots):
    ETFCreateRedeemResultAddLots(builder, lots)

def ETFCreateRedeemResultAddLegs(builder, legs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(legs), 0)

def AddLegs(builder, legs):
    ETFCreateRedeemResultAddLegs(builder, legs)

def ETFCreateRedeemResultStartLegsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLegsVector(builder, numElems):
    return ETFCreateRedeemResultStartLegsVector(builder, numElems)

def ETFCreateRedeemResultAddSuccess(builder, success):
    builder.PrependBoolSlot(4, success, 0)

def AddSuccess(builder, success):
    ETFCreateRedeemResultAddSuccess(builder, success)

def ETFCreateRedeemResultAddRejectCode(builder, rejectCode):
    builder.PrependUint16Slot(5, rejectCode, 0)

def AddRejectCode(builder, rejectCode):
    ETFCreateRedeemResultAddRejectCode(builder, rejectCode)

def ETFCreateRedeemResultAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    ETFCreateRedeemResultAddText(builder, text)

def ETFCreateRedeemResultAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(7, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    ETFCreateRedeemResultAddTsNanos(builder, tsNanos)

def ETFCreateRedeemResultEnd(builder):
    return builder.EndObject()

def End(builder):
    return ETFCreateRedeemResultEnd(builder)
