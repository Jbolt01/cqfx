# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BookDelta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BookDelta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBookDelta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BookDeltaBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # BookDelta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BookDelta
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BookDelta
    def FeedSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BookDelta
    def Kind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # BookDelta
    def Levels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ctc.PriceLevelDelta import PriceLevelDelta
            obj = PriceLevelDelta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BookDelta
    def LevelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BookDelta
    def LevelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # BookDelta
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BookDelta
    def BestBidTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BookDelta
    def BestAskTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BookDeltaStart(builder):
    builder.StartObject(7)

def Start(builder):
    BookDeltaStart(builder)

def BookDeltaAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(0, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    BookDeltaAddInstrumentId(builder, instrumentId)

def BookDeltaAddFeedSeq(builder, feedSeq):
    builder.PrependUint64Slot(1, feedSeq, 0)

def AddFeedSeq(builder, feedSeq):
    BookDeltaAddFeedSeq(builder, feedSeq)

def BookDeltaAddKind(builder, kind):
    builder.PrependUint8Slot(2, kind, 0)

def AddKind(builder, kind):
    BookDeltaAddKind(builder, kind)

def BookDeltaAddLevels(builder, levels):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(levels), 0)

def AddLevels(builder, levels):
    BookDeltaAddLevels(builder, levels)

def BookDeltaStartLevelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLevelsVector(builder, numElems):
    return BookDeltaStartLevelsVector(builder, numElems)

def BookDeltaAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(4, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    BookDeltaAddTsNanos(builder, tsNanos)

def BookDeltaAddBestBidTicks(builder, bestBidTicks):
    builder.PrependInt32Slot(5, bestBidTicks, 0)

def AddBestBidTicks(builder, bestBidTicks):
    BookDeltaAddBestBidTicks(builder, bestBidTicks)

def BookDeltaAddBestAskTicks(builder, bestAskTicks):
    builder.PrependInt32Slot(6, bestAskTicks, 0)

def AddBestAskTicks(builder, bestAskTicks):
    BookDeltaAddBestAskTicks(builder, bestAskTicks)

def BookDeltaEnd(builder):
    return builder.EndObject()

def End(builder):
    return BookDeltaEnd(builder)
