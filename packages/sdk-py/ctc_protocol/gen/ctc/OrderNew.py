# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OrderNew(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrderNew()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrderNew(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrderNewBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # OrderNew
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OrderNew
    def ClOrdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def Side(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def Tif(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def PxTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def Lots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def MinFillLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def PostOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OrderNew
    def Stp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OrderNew
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def OrderNewStart(builder):
    builder.StartObject(12)

def Start(builder):
    OrderNewStart(builder)

def OrderNewAddClOrdId(builder, clOrdId):
    builder.PrependUint64Slot(0, clOrdId, 0)

def AddClOrdId(builder, clOrdId):
    OrderNewAddClOrdId(builder, clOrdId)

def OrderNewAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(1, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    OrderNewAddInstrumentId(builder, instrumentId)

def OrderNewAddSide(builder, side):
    builder.PrependUint8Slot(2, side, 0)

def AddSide(builder, side):
    OrderNewAddSide(builder, side)

def OrderNewAddType(builder, type):
    builder.PrependUint8Slot(3, type, 0)

def AddType(builder, type):
    OrderNewAddType(builder, type)

def OrderNewAddTif(builder, tif):
    builder.PrependUint8Slot(4, tif, 0)

def AddTif(builder, tif):
    OrderNewAddTif(builder, tif)

def OrderNewAddPxTicks(builder, pxTicks):
    builder.PrependInt32Slot(5, pxTicks, 0)

def AddPxTicks(builder, pxTicks):
    OrderNewAddPxTicks(builder, pxTicks)

def OrderNewAddLots(builder, lots):
    builder.PrependInt64Slot(6, lots, 0)

def AddLots(builder, lots):
    OrderNewAddLots(builder, lots)

def OrderNewAddMinFillLots(builder, minFillLots):
    builder.PrependInt64Slot(7, minFillLots, 0)

def AddMinFillLots(builder, minFillLots):
    OrderNewAddMinFillLots(builder, minFillLots)

def OrderNewAddPostOnly(builder, postOnly):
    builder.PrependBoolSlot(8, postOnly, 0)

def AddPostOnly(builder, postOnly):
    OrderNewAddPostOnly(builder, postOnly)

def OrderNewAddStp(builder, stp):
    builder.PrependUint8Slot(9, stp, 0)

def AddStp(builder, stp):
    OrderNewAddStp(builder, stp)

def OrderNewAddUserId(builder, userId):
    builder.PrependUint32Slot(10, userId, 0)

def AddUserId(builder, userId):
    OrderNewAddUserId(builder, userId)

def OrderNewAddTeamId(builder, teamId):
    builder.PrependUint32Slot(11, teamId, 0)

def AddTeamId(builder, teamId):
    OrderNewAddTeamId(builder, teamId)

def OrderNewEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrderNewEnd(builder)
