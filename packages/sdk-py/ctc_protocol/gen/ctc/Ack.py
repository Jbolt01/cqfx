# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Ack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Ack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAck(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AckBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # Ack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Ack
    def ExecType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Ack
    def ClOrdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Ack
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Ack
    def InstrumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Ack
    def FilledLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Ack
    def LeavesLots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Ack
    def AvgPxTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Ack
    def RejectCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Ack
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ack
    def TsNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def AckStart(builder):
    builder.StartObject(10)

def Start(builder):
    AckStart(builder)

def AckAddExecType(builder, execType):
    builder.PrependUint8Slot(0, execType, 0)

def AddExecType(builder, execType):
    AckAddExecType(builder, execType)

def AckAddClOrdId(builder, clOrdId):
    builder.PrependUint64Slot(1, clOrdId, 0)

def AddClOrdId(builder, clOrdId):
    AckAddClOrdId(builder, clOrdId)

def AckAddOrderId(builder, orderId):
    builder.PrependUint64Slot(2, orderId, 0)

def AddOrderId(builder, orderId):
    AckAddOrderId(builder, orderId)

def AckAddInstrumentId(builder, instrumentId):
    builder.PrependUint32Slot(3, instrumentId, 0)

def AddInstrumentId(builder, instrumentId):
    AckAddInstrumentId(builder, instrumentId)

def AckAddFilledLots(builder, filledLots):
    builder.PrependInt64Slot(4, filledLots, 0)

def AddFilledLots(builder, filledLots):
    AckAddFilledLots(builder, filledLots)

def AckAddLeavesLots(builder, leavesLots):
    builder.PrependInt64Slot(5, leavesLots, 0)

def AddLeavesLots(builder, leavesLots):
    AckAddLeavesLots(builder, leavesLots)

def AckAddAvgPxTicks(builder, avgPxTicks):
    builder.PrependInt32Slot(6, avgPxTicks, 0)

def AddAvgPxTicks(builder, avgPxTicks):
    AckAddAvgPxTicks(builder, avgPxTicks)

def AckAddRejectCode(builder, rejectCode):
    builder.PrependUint16Slot(7, rejectCode, 0)

def AddRejectCode(builder, rejectCode):
    AckAddRejectCode(builder, rejectCode)

def AckAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    AckAddText(builder, text)

def AckAddTsNanos(builder, tsNanos):
    builder.PrependUint64Slot(9, tsNanos, 0)

def AddTsNanos(builder, tsNanos):
    AckAddTsNanos(builder, tsNanos)

def AckEnd(builder):
    return builder.EndObject()

def End(builder):
    return AckEnd(builder)
