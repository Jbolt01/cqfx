# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ctc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Auth(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Auth()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAuth(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AuthBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x54\x43\x31", size_prefixed=size_prefixed)

    # Auth
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Auth
    def Jwt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Auth
    def ClientName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Auth
    def Protocol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def AuthStart(builder):
    builder.StartObject(3)

def Start(builder):
    AuthStart(builder)

def AuthAddJwt(builder, jwt):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jwt), 0)

def AddJwt(builder, jwt):
    AuthAddJwt(builder, jwt)

def AuthAddClientName(builder, clientName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clientName), 0)

def AddClientName(builder, clientName):
    AuthAddClientName(builder, clientName)

def AuthAddProtocol(builder, protocol):
    builder.PrependUint32Slot(2, protocol, 0)

def AddProtocol(builder, protocol):
    AuthAddProtocol(builder, protocol)

def AuthEnd(builder):
    return builder.EndObject()

def End(builder):
    return AuthEnd(builder)
